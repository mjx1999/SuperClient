package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.PayMethod;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PAY_METHOD.
*/
public class PayMethodDao extends AbstractDao<PayMethod, Void> {

    public static final String TABLENAME = "PAY_METHOD";

    /**
     * Properties of entity PayMethod.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PaymethodID = new Property(0, Long.class, "PaymethodID", false, "PAYMETHOD_ID");
        public final static Property PaymethodCode = new Property(1, String.class, "PaymethodCode", false, "PAYMETHOD_CODE");
        public final static Property PaymethodName = new Property(2, String.class, "PaymethodName", false, "PAYMETHOD_NAME");
        public final static Property AccountID = new Property(3, Long.class, "AccountID", false, "ACCOUNT_ID");
        public final static Property Closed = new Property(4, Integer.class, "Closed", false, "CLOSED");
    };


    public PayMethodDao(DaoConfig config) {
        super(config);
    }
    
    public PayMethodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PAY_METHOD' (" + //
                "'PAYMETHOD_ID' INTEGER," + // 0: PaymethodID
                "'PAYMETHOD_CODE' TEXT," + // 1: PaymethodCode
                "'PAYMETHOD_NAME' TEXT," + // 2: PaymethodName
                "'ACCOUNT_ID' INTEGER," + // 3: AccountID
                "'CLOSED' INTEGER);"); // 4: Closed
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PAY_METHOD_PAYMETHOD_ID ON PAY_METHOD" +
                " (PAYMETHOD_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PAY_METHOD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PayMethod entity) {
        stmt.clearBindings();
 
        Long PaymethodID = entity.getPaymethodID();
        if (PaymethodID != null) {
            stmt.bindLong(1, PaymethodID);
        }
 
        String PaymethodCode = entity.getPaymethodCode();
        if (PaymethodCode != null) {
            stmt.bindString(2, PaymethodCode);
        }
 
        String PaymethodName = entity.getPaymethodName();
        if (PaymethodName != null) {
            stmt.bindString(3, PaymethodName);
        }
 
        Long AccountID = entity.getAccountID();
        if (AccountID != null) {
            stmt.bindLong(4, AccountID);
        }
 
        Integer Closed = entity.getClosed();
        if (Closed != null) {
            stmt.bindLong(5, Closed);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PayMethod readEntity(Cursor cursor, int offset) {
        PayMethod entity = new PayMethod( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // PaymethodID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PaymethodCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PaymethodName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // AccountID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // Closed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PayMethod entity, int offset) {
        entity.setPaymethodID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPaymethodCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPaymethodName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccountID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setClosed(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PayMethod entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PayMethod entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
