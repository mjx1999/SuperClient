package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.Employee;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EMPLOYEE.
*/
public class EmployeeDao extends AbstractDao<Employee, Void> {

    public static final String TABLENAME = "EMPLOYEE";

    /**
     * Properties of entity Employee.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property EmpID = new Property(0, Long.class, "EmpID", false, "EMP_ID");
        public final static Property ShopID = new Property(1, Long.class, "ShopID", false, "SHOP_ID");
        public final static Property EmpCode = new Property(2, String.class, "EmpCode", false, "EMP_CODE");
        public final static Property EmpName = new Property(3, String.class, "EmpName", false, "EMP_NAME");
        public final static Property DepartmentID = new Property(4, Long.class, "DepartmentID", false, "DEPARTMENT_ID");
        public final static Property Sex = new Property(5, String.class, "Sex", false, "SEX");
        public final static Property Close = new Property(6, Integer.class, "Close", false, "CLOSE");
    };


    public EmployeeDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EMPLOYEE' (" + //
                "'EMP_ID' INTEGER," + // 0: EmpID
                "'SHOP_ID' INTEGER," + // 1: ShopID
                "'EMP_CODE' TEXT," + // 2: EmpCode
                "'EMP_NAME' TEXT," + // 3: EmpName
                "'DEPARTMENT_ID' INTEGER," + // 4: DepartmentID
                "'SEX' TEXT," + // 5: Sex
                "'CLOSE' INTEGER);"); // 6: Close
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_EMPLOYEE_EMP_ID ON EMPLOYEE" +
                " (EMP_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EMPLOYEE_SHOP_ID ON EMPLOYEE" +
                " (SHOP_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_EMPLOYEE_DEPARTMENT_ID ON EMPLOYEE" +
                " (DEPARTMENT_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EMPLOYEE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Employee entity) {
        stmt.clearBindings();
 
        Long EmpID = entity.getEmpID();
        if (EmpID != null) {
            stmt.bindLong(1, EmpID);
        }
 
        Long ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(2, ShopID);
        }
 
        String EmpCode = entity.getEmpCode();
        if (EmpCode != null) {
            stmt.bindString(3, EmpCode);
        }
 
        String EmpName = entity.getEmpName();
        if (EmpName != null) {
            stmt.bindString(4, EmpName);
        }
 
        Long DepartmentID = entity.getDepartmentID();
        if (DepartmentID != null) {
            stmt.bindLong(5, DepartmentID);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(6, Sex);
        }
 
        Integer Close = entity.getClose();
        if (Close != null) {
            stmt.bindLong(7, Close);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Employee readEntity(Cursor cursor, int offset) {
        Employee entity = new Employee( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // EmpID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ShopID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // EmpCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EmpName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // DepartmentID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Sex
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // Close
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Employee entity, int offset) {
        entity.setEmpID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShopID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEmpCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmpName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartmentID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClose(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Employee entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Employee entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
