package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.OnHand;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ON_HAND.
*/
public class OnHandDao extends AbstractDao<OnHand, Void> {

    public static final String TABLENAME = "ON_HAND";

    /**
     * Properties of entity OnHand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StoreID = new Property(0, Long.class, "StoreID", false, "STORE_ID");
        public final static Property GoodsID = new Property(1, Long.class, "GoodsID", false, "GOODS_ID");
        public final static Property Quantity = new Property(2, Double.class, "Quantity", false, "QUANTITY");
        public final static Property RealQty = new Property(3, Double.class, "RealQty", false, "REAL_QTY");
    };


    public OnHandDao(DaoConfig config) {
        super(config);
    }
    
    public OnHandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ON_HAND' (" + //
                "'STORE_ID' INTEGER," + // 0: StoreID
                "'GOODS_ID' INTEGER," + // 1: GoodsID
                "'QUANTITY' REAL," + // 2: Quantity
                "'REAL_QTY' REAL);"); // 3: RealQty
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ON_HAND_STORE_ID ON ON_HAND" +
                " (STORE_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ON_HAND_GOODS_ID ON ON_HAND" +
                " (GOODS_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ON_HAND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OnHand entity) {
        stmt.clearBindings();
 
        Long StoreID = entity.getStoreID();
        if (StoreID != null) {
            stmt.bindLong(1, StoreID);
        }
 
        Long GoodsID = entity.getGoodsID();
        if (GoodsID != null) {
            stmt.bindLong(2, GoodsID);
        }
 
        Double Quantity = entity.getQuantity();
        if (Quantity != null) {
            stmt.bindDouble(3, Quantity);
        }
 
        Double RealQty = entity.getRealQty();
        if (RealQty != null) {
            stmt.bindDouble(4, RealQty);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public OnHand readEntity(Cursor cursor, int offset) {
        OnHand entity = new OnHand( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // StoreID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // GoodsID
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // Quantity
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3) // RealQty
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OnHand entity, int offset) {
        entity.setStoreID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQuantity(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setRealQty(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(OnHand entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(OnHand entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
