package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.TradeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRADE_TYPE.
*/
public class TradeTypeDao extends AbstractDao<TradeType, Void> {

    public static final String TABLENAME = "TRADE_TYPE";

    /**
     * Properties of entity TradeType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TradeTypeID = new Property(0, Long.class, "TradeTypeID", false, "TRADE_TYPE_ID");
        public final static Property TradeTypeCode = new Property(1, String.class, "TradeTypeCode", false, "TRADE_TYPE_CODE");
        public final static Property TradeTypeName = new Property(2, String.class, "TradeTypeName", false, "TRADE_TYPE_NAME");
        public final static Property LCode = new Property(3, String.class, "LCode", false, "LCODE");
        public final static Property ParentID = new Property(4, Long.class, "ParentID", false, "PARENT_ID");
    };


    public TradeTypeDao(DaoConfig config) {
        super(config);
    }
    
    public TradeTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRADE_TYPE' (" + //
                "'TRADE_TYPE_ID' INTEGER," + // 0: TradeTypeID
                "'TRADE_TYPE_CODE' TEXT," + // 1: TradeTypeCode
                "'TRADE_TYPE_NAME' TEXT," + // 2: TradeTypeName
                "'LCODE' TEXT," + // 3: LCode
                "'PARENT_ID' INTEGER);"); // 4: ParentID
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRADE_TYPE_TRADE_TYPE_ID ON TRADE_TYPE" +
                " (TRADE_TYPE_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRADE_TYPE_LCODE ON TRADE_TYPE" +
                " (LCODE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRADE_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TradeType entity) {
        stmt.clearBindings();
 
        Long TradeTypeID = entity.getTradeTypeID();
        if (TradeTypeID != null) {
            stmt.bindLong(1, TradeTypeID);
        }
 
        String TradeTypeCode = entity.getTradeTypeCode();
        if (TradeTypeCode != null) {
            stmt.bindString(2, TradeTypeCode);
        }
 
        String TradeTypeName = entity.getTradeTypeName();
        if (TradeTypeName != null) {
            stmt.bindString(3, TradeTypeName);
        }
 
        String LCode = entity.getLCode();
        if (LCode != null) {
            stmt.bindString(4, LCode);
        }
 
        Long ParentID = entity.getParentID();
        if (ParentID != null) {
            stmt.bindLong(5, ParentID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public TradeType readEntity(Cursor cursor, int offset) {
        TradeType entity = new TradeType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // TradeTypeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TradeTypeCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TradeTypeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // LCode
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // ParentID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TradeType entity, int offset) {
        entity.setTradeTypeID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTradeTypeCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTradeTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParentID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(TradeType entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(TradeType entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
