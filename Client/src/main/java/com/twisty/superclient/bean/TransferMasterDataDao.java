package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.TransferMasterData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRANSFER_MASTER_DATA.
*/
public class TransferMasterDataDao extends AbstractDao<TransferMasterData, Void> {

    public static final String TABLENAME = "TRANSFER_MASTER_DATA";

    /**
     * Properties of entity TransferMasterData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BillID = new Property(0, Long.class, "BillID", false, "BILL_ID");
        public final static Property BillKind = new Property(1, Integer.class, "BillKind", false, "BILL_KIND");
        public final static Property BillState = new Property(2, Integer.class, "BillState", false, "BILL_STATE");
        public final static Property BillCode = new Property(3, String.class, "BillCode", false, "BILL_CODE");
        public final static Property BillKindName = new Property(4, String.class, "BillKindName", false, "BILL_KIND_NAME");
        public final static Property BillStateName = new Property(5, String.class, "BillStateName", false, "BILL_STATE_NAME");
        public final static Property BillDate = new Property(6, String.class, "BillDate", false, "BILL_DATE");
        public final static Property CheckorCode = new Property(7, String.class, "CheckorCode", false, "CHECKOR_CODE");
        public final static Property CheckorName = new Property(8, String.class, "CheckorName", false, "CHECKOR_NAME");
        public final static Property DepartmentCode = new Property(9, String.class, "DepartmentCode", false, "DEPARTMENT_CODE");
        public final static Property DepartmentName = new Property(10, String.class, "DepartmentName", false, "DEPARTMENT_NAME");
        public final static Property EmpCode = new Property(11, String.class, "EmpCode", false, "EMP_CODE");
        public final static Property EmpName = new Property(12, String.class, "EmpName", false, "EMP_NAME");
        public final static Property InStoreCode = new Property(13, String.class, "InStoreCode", false, "IN_STORE_CODE");
        public final static Property StoreCode = new Property(14, String.class, "StoreCode", false, "STORE_CODE");
        public final static Property InStoreName = new Property(15, String.class, "InStoreName", false, "IN_STORE_NAME");
        public final static Property StoreName = new Property(16, String.class, "StoreName", false, "STORE_NAME");
        public final static Property UpdateTime = new Property(17, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property BillTo = new Property(18, String.class, "BillTo", false, "BILL_TO");
        public final static Property OpCode = new Property(19, String.class, "OpCode", false, "OP_CODE");
        public final static Property OpName = new Property(20, String.class, "OpName", false, "OP_NAME");
        public final static Property Amount = new Property(21, Double.class, "Amount", false, "AMOUNT");
        public final static Property CheckorID = new Property(22, Long.class, "CheckorID", false, "CHECKOR_ID");
        public final static Property DepartmentID = new Property(23, Long.class, "DepartmentID", false, "DEPARTMENT_ID");
        public final static Property EmpID = new Property(24, Long.class, "EmpID", false, "EMP_ID");
        public final static Property InStoreID = new Property(25, Long.class, "InStoreID", false, "IN_STORE_ID");
        public final static Property OpID = new Property(26, Long.class, "OpID", false, "OP_ID");
        public final static Property ShipType = new Property(27, Long.class, "ShipType", false, "SHIP_TYPE");
        public final static Property ShopID = new Property(28, Long.class, "ShopID", false, "SHOP_ID");
        public final static Property StoreID = new Property(29, Long.class, "StoreID", false, "STORE_ID");
        public final static Property ReferCount = new Property(30, Integer.class, "ReferCount", false, "REFER_COUNT");
        public final static Property Remark = new Property(31, String.class, "Remark", false, "REMARK");
        public final static Property ShipTypeName = new Property(32, String.class, "ShipTypeName", false, "SHIP_TYPE_NAME");
        public final static Property SFlag = new Property(33, String.class, "SFlag", false, "SFLAG");
        public final static Property UserDef1 = new Property(34, String.class, "UserDef1", false, "USER_DEF1");
        public final static Property UserDef2 = new Property(35, String.class, "UserDef2", false, "USER_DEF2");
        public final static Property UserDef3 = new Property(36, String.class, "UserDef3", false, "USER_DEF3");
        public final static Property UserDef4 = new Property(37, String.class, "UserDef4", false, "USER_DEF4");
        public final static Property UserDef5 = new Property(38, String.class, "UserDef5", false, "USER_DEF5");
    };


    public TransferMasterDataDao(DaoConfig config) {
        super(config);
    }
    
    public TransferMasterDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRANSFER_MASTER_DATA' (" + //
                "'BILL_ID' INTEGER," + // 0: BillID
                "'BILL_KIND' INTEGER," + // 1: BillKind
                "'BILL_STATE' INTEGER," + // 2: BillState
                "'BILL_CODE' TEXT," + // 3: BillCode
                "'BILL_KIND_NAME' TEXT," + // 4: BillKindName
                "'BILL_STATE_NAME' TEXT," + // 5: BillStateName
                "'BILL_DATE' TEXT," + // 6: BillDate
                "'CHECKOR_CODE' TEXT," + // 7: CheckorCode
                "'CHECKOR_NAME' TEXT," + // 8: CheckorName
                "'DEPARTMENT_CODE' TEXT," + // 9: DepartmentCode
                "'DEPARTMENT_NAME' TEXT," + // 10: DepartmentName
                "'EMP_CODE' TEXT," + // 11: EmpCode
                "'EMP_NAME' TEXT," + // 12: EmpName
                "'IN_STORE_CODE' TEXT," + // 13: InStoreCode
                "'STORE_CODE' TEXT," + // 14: StoreCode
                "'IN_STORE_NAME' TEXT," + // 15: InStoreName
                "'STORE_NAME' TEXT," + // 16: StoreName
                "'UPDATE_TIME' TEXT," + // 17: UpdateTime
                "'BILL_TO' TEXT," + // 18: BillTo
                "'OP_CODE' TEXT," + // 19: OpCode
                "'OP_NAME' TEXT," + // 20: OpName
                "'AMOUNT' REAL," + // 21: Amount
                "'CHECKOR_ID' INTEGER," + // 22: CheckorID
                "'DEPARTMENT_ID' INTEGER," + // 23: DepartmentID
                "'EMP_ID' INTEGER," + // 24: EmpID
                "'IN_STORE_ID' INTEGER," + // 25: InStoreID
                "'OP_ID' INTEGER," + // 26: OpID
                "'SHIP_TYPE' INTEGER," + // 27: ShipType
                "'SHOP_ID' INTEGER," + // 28: ShopID
                "'STORE_ID' INTEGER," + // 29: StoreID
                "'REFER_COUNT' INTEGER," + // 30: ReferCount
                "'REMARK' TEXT," + // 31: Remark
                "'SHIP_TYPE_NAME' TEXT," + // 32: ShipTypeName
                "'SFLAG' TEXT," + // 33: SFlag
                "'USER_DEF1' TEXT," + // 34: UserDef1
                "'USER_DEF2' TEXT," + // 35: UserDef2
                "'USER_DEF3' TEXT," + // 36: UserDef3
                "'USER_DEF4' TEXT," + // 37: UserDef4
                "'USER_DEF5' TEXT);"); // 38: UserDef5
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRANSFER_MASTER_DATA_BILL_ID ON TRANSFER_MASTER_DATA" +
                " (BILL_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRANSFER_MASTER_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransferMasterData entity) {
        stmt.clearBindings();
 
        Long BillID = entity.getBillID();
        if (BillID != null) {
            stmt.bindLong(1, BillID);
        }
 
        Integer BillKind = entity.getBillKind();
        if (BillKind != null) {
            stmt.bindLong(2, BillKind);
        }
 
        Integer BillState = entity.getBillState();
        if (BillState != null) {
            stmt.bindLong(3, BillState);
        }
 
        String BillCode = entity.getBillCode();
        if (BillCode != null) {
            stmt.bindString(4, BillCode);
        }
 
        String BillKindName = entity.getBillKindName();
        if (BillKindName != null) {
            stmt.bindString(5, BillKindName);
        }
 
        String BillStateName = entity.getBillStateName();
        if (BillStateName != null) {
            stmt.bindString(6, BillStateName);
        }
 
        String BillDate = entity.getBillDate();
        if (BillDate != null) {
            stmt.bindString(7, BillDate);
        }
 
        String CheckorCode = entity.getCheckorCode();
        if (CheckorCode != null) {
            stmt.bindString(8, CheckorCode);
        }
 
        String CheckorName = entity.getCheckorName();
        if (CheckorName != null) {
            stmt.bindString(9, CheckorName);
        }
 
        String DepartmentCode = entity.getDepartmentCode();
        if (DepartmentCode != null) {
            stmt.bindString(10, DepartmentCode);
        }
 
        String DepartmentName = entity.getDepartmentName();
        if (DepartmentName != null) {
            stmt.bindString(11, DepartmentName);
        }
 
        String EmpCode = entity.getEmpCode();
        if (EmpCode != null) {
            stmt.bindString(12, EmpCode);
        }
 
        String EmpName = entity.getEmpName();
        if (EmpName != null) {
            stmt.bindString(13, EmpName);
        }
 
        String InStoreCode = entity.getInStoreCode();
        if (InStoreCode != null) {
            stmt.bindString(14, InStoreCode);
        }
 
        String StoreCode = entity.getStoreCode();
        if (StoreCode != null) {
            stmt.bindString(15, StoreCode);
        }
 
        String InStoreName = entity.getInStoreName();
        if (InStoreName != null) {
            stmt.bindString(16, InStoreName);
        }
 
        String StoreName = entity.getStoreName();
        if (StoreName != null) {
            stmt.bindString(17, StoreName);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(18, UpdateTime);
        }
 
        String BillTo = entity.getBillTo();
        if (BillTo != null) {
            stmt.bindString(19, BillTo);
        }
 
        String OpCode = entity.getOpCode();
        if (OpCode != null) {
            stmt.bindString(20, OpCode);
        }
 
        String OpName = entity.getOpName();
        if (OpName != null) {
            stmt.bindString(21, OpName);
        }
 
        Double Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindDouble(22, Amount);
        }
 
        Long CheckorID = entity.getCheckorID();
        if (CheckorID != null) {
            stmt.bindLong(23, CheckorID);
        }
 
        Long DepartmentID = entity.getDepartmentID();
        if (DepartmentID != null) {
            stmt.bindLong(24, DepartmentID);
        }
 
        Long EmpID = entity.getEmpID();
        if (EmpID != null) {
            stmt.bindLong(25, EmpID);
        }
 
        Long InStoreID = entity.getInStoreID();
        if (InStoreID != null) {
            stmt.bindLong(26, InStoreID);
        }
 
        Long OpID = entity.getOpID();
        if (OpID != null) {
            stmt.bindLong(27, OpID);
        }
 
        Long ShipType = entity.getShipType();
        if (ShipType != null) {
            stmt.bindLong(28, ShipType);
        }
 
        Long ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(29, ShopID);
        }
 
        Long StoreID = entity.getStoreID();
        if (StoreID != null) {
            stmt.bindLong(30, StoreID);
        }
 
        Integer ReferCount = entity.getReferCount();
        if (ReferCount != null) {
            stmt.bindLong(31, ReferCount);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(32, Remark);
        }
 
        String ShipTypeName = entity.getShipTypeName();
        if (ShipTypeName != null) {
            stmt.bindString(33, ShipTypeName);
        }
 
        String SFlag = entity.getSFlag();
        if (SFlag != null) {
            stmt.bindString(34, SFlag);
        }
 
        String UserDef1 = entity.getUserDef1();
        if (UserDef1 != null) {
            stmt.bindString(35, UserDef1);
        }
 
        String UserDef2 = entity.getUserDef2();
        if (UserDef2 != null) {
            stmt.bindString(36, UserDef2);
        }
 
        String UserDef3 = entity.getUserDef3();
        if (UserDef3 != null) {
            stmt.bindString(37, UserDef3);
        }
 
        String UserDef4 = entity.getUserDef4();
        if (UserDef4 != null) {
            stmt.bindString(38, UserDef4);
        }
 
        String UserDef5 = entity.getUserDef5();
        if (UserDef5 != null) {
            stmt.bindString(39, UserDef5);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public TransferMasterData readEntity(Cursor cursor, int offset) {
        TransferMasterData entity = new TransferMasterData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // BillID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // BillKind
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // BillState
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BillCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BillKindName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BillStateName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BillDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CheckorCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CheckorName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // DepartmentCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // DepartmentName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // EmpCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // EmpName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // InStoreCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // StoreCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // InStoreName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // StoreName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // UpdateTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // BillTo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // OpCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // OpName
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // Amount
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // CheckorID
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // DepartmentID
            cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24), // EmpID
            cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25), // InStoreID
            cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26), // OpID
            cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27), // ShipType
            cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28), // ShopID
            cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29), // StoreID
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // ReferCount
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // Remark
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // ShipTypeName
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // SFlag
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // UserDef1
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // UserDef2
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // UserDef3
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // UserDef4
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38) // UserDef5
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransferMasterData entity, int offset) {
        entity.setBillID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillKind(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBillState(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBillCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBillKindName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBillStateName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBillDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheckorCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCheckorName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDepartmentCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDepartmentName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmpCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmpName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setInStoreCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStoreCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setInStoreName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStoreName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUpdateTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBillTo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOpCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setOpName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAmount(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setCheckorID(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setDepartmentID(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
        entity.setEmpID(cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24));
        entity.setInStoreID(cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25));
        entity.setOpID(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
        entity.setShipType(cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27));
        entity.setShopID(cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28));
        entity.setStoreID(cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29));
        entity.setReferCount(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setRemark(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setShipTypeName(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSFlag(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setUserDef1(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setUserDef2(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setUserDef3(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setUserDef4(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setUserDef5(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(TransferMasterData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(TransferMasterData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
