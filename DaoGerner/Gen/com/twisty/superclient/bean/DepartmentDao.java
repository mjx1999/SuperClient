package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.Department;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEPARTMENT.
*/
public class DepartmentDao extends AbstractDao<Department, Void> {

    public static final String TABLENAME = "DEPARTMENT";

    /**
     * Properties of entity Department.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DepartmentID = new Property(0, Long.class, "DepartmentID", false, "DEPARTMENT_ID");
        public final static Property DepartmentCode = new Property(1, String.class, "DepartmentCode", false, "DEPARTMENT_CODE");
        public final static Property DepartmentName = new Property(2, String.class, "DepartmentName", false, "DEPARTMENT_NAME");
        public final static Property Close = new Property(3, Boolean.class, "Close", false, "CLOSE");
    };


    public DepartmentDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEPARTMENT' (" + //
                "'DEPARTMENT_ID' INTEGER," + // 0: DepartmentID
                "'DEPARTMENT_CODE' TEXT," + // 1: DepartmentCode
                "'DEPARTMENT_NAME' TEXT," + // 2: DepartmentName
                "'CLOSE' INTEGER);"); // 3: Close
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DEPARTMENT_DEPARTMENT_ID ON DEPARTMENT" +
                " (DEPARTMENT_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEPARTMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Department entity) {
        stmt.clearBindings();
 
        Long DepartmentID = entity.getDepartmentID();
        if (DepartmentID != null) {
            stmt.bindLong(1, DepartmentID);
        }
 
        String DepartmentCode = entity.getDepartmentCode();
        if (DepartmentCode != null) {
            stmt.bindString(2, DepartmentCode);
        }
 
        String DepartmentName = entity.getDepartmentName();
        if (DepartmentName != null) {
            stmt.bindString(3, DepartmentName);
        }
 
        Boolean Close = entity.getClose();
        if (Close != null) {
            stmt.bindLong(4, Close ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Department readEntity(Cursor cursor, int offset) {
        Department entity = new Department( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // DepartmentID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DepartmentCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DepartmentName
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // Close
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Department entity, int offset) {
        entity.setDepartmentID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDepartmentCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDepartmentName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClose(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Department entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Department entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
