package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table SYS_PARAM.
 */
public class SysParamDao extends AbstractDao<SysParam, Void> {

    public static final String TABLENAME = "SYS_PARAM";

    public SysParamDao(DaoConfig config) {
        super(config);
    }

    ;


    public SysParamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'SYS_PARAM' (" + //
                "'PARAM_ID' INTEGER," + // 0: ParamID
                "'PARAM_NAME' TEXT," + // 1: ParamName
                "'DATA_VALUE' TEXT," + // 2: DataValue
                "'CONTENT' TEXT," + // 3: Content
                "'LCODE' TEXT);"); // 4: LCode
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SYS_PARAM'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, SysParam entity) {
        stmt.clearBindings();

        Long ParamID = entity.getParamID();
        if (ParamID != null) {
            stmt.bindLong(1, ParamID);
        }

        String ParamName = entity.getParamName();
        if (ParamName != null) {
            stmt.bindString(2, ParamName);
        }

        String DataValue = entity.getDataValue();
        if (DataValue != null) {
            stmt.bindString(3, DataValue);
        }

        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(4, Content);
        }

        String LCode = entity.getLCode();
        if (LCode != null) {
            stmt.bindString(5, LCode);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public SysParam readEntity(Cursor cursor, int offset) {
        SysParam entity = new SysParam( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ParamID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ParamName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DataValue
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Content
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // LCode
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, SysParam entity, int offset) {
        entity.setParamID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParamName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDataValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(SysParam entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(SysParam entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity SysParam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ParamID = new Property(0, Long.class, "ParamID", false, "PARAM_ID");
        public final static Property ParamName = new Property(1, String.class, "ParamName", false, "PARAM_NAME");
        public final static Property DataValue = new Property(2, String.class, "DataValue", false, "DATA_VALUE");
        public final static Property Content = new Property(3, String.class, "Content", false, "CONTENT");
        public final static Property LCode = new Property(4, String.class, "LCode", false, "LCODE");
    }

}
