package com.twisty.superclient.bean;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.twisty.superclient.bean.AccsetDao;
import com.twisty.superclient.bean.AreaDao;
import com.twisty.superclient.bean.DepartmentDao;
import com.twisty.superclient.bean.EmployeeDao;
import com.twisty.superclient.bean.OperatorDao;
import com.twisty.superclient.bean.TraderDao;
import com.twisty.superclient.bean.TradeTypeDao;
import com.twisty.superclient.bean.IoTypeDao;
import com.twisty.superclient.bean.StoreDao;
import com.twisty.superclient.bean.GDTypeDao;
import com.twisty.superclient.bean.GoodsDao;
import com.twisty.superclient.bean.UnitDao;
import com.twisty.superclient.bean.TraderPriceDao;
import com.twisty.superclient.bean.GoodsPictureDao;
import com.twisty.superclient.bean.OnHandDao;
import com.twisty.superclient.bean.AccountDao;
import com.twisty.superclient.bean.PayMethodDao;
import com.twisty.superclient.bean.AMKindDao;
import com.twisty.superclient.bean.SalesBillMasterDataDao;
import com.twisty.superclient.bean.SalesBillDetail1DataDao;
import com.twisty.superclient.bean.SalesOrderMasterDataDao;
import com.twisty.superclient.bean.SalesOrderDetail1DataDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        AccsetDao.createTable(db, ifNotExists);
        AreaDao.createTable(db, ifNotExists);
        DepartmentDao.createTable(db, ifNotExists);
        EmployeeDao.createTable(db, ifNotExists);
        OperatorDao.createTable(db, ifNotExists);
        TraderDao.createTable(db, ifNotExists);
        TradeTypeDao.createTable(db, ifNotExists);
        IoTypeDao.createTable(db, ifNotExists);
        StoreDao.createTable(db, ifNotExists);
        GDTypeDao.createTable(db, ifNotExists);
        GoodsDao.createTable(db, ifNotExists);
        UnitDao.createTable(db, ifNotExists);
        TraderPriceDao.createTable(db, ifNotExists);
        GoodsPictureDao.createTable(db, ifNotExists);
        OnHandDao.createTable(db, ifNotExists);
        AccountDao.createTable(db, ifNotExists);
        PayMethodDao.createTable(db, ifNotExists);
        AMKindDao.createTable(db, ifNotExists);
        SalesBillMasterDataDao.createTable(db, ifNotExists);
        SalesBillDetail1DataDao.createTable(db, ifNotExists);
        SalesOrderMasterDataDao.createTable(db, ifNotExists);
        SalesOrderDetail1DataDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        AccsetDao.dropTable(db, ifExists);
        AreaDao.dropTable(db, ifExists);
        DepartmentDao.dropTable(db, ifExists);
        EmployeeDao.dropTable(db, ifExists);
        OperatorDao.dropTable(db, ifExists);
        TraderDao.dropTable(db, ifExists);
        TradeTypeDao.dropTable(db, ifExists);
        IoTypeDao.dropTable(db, ifExists);
        StoreDao.dropTable(db, ifExists);
        GDTypeDao.dropTable(db, ifExists);
        GoodsDao.dropTable(db, ifExists);
        UnitDao.dropTable(db, ifExists);
        TraderPriceDao.dropTable(db, ifExists);
        GoodsPictureDao.dropTable(db, ifExists);
        OnHandDao.dropTable(db, ifExists);
        AccountDao.dropTable(db, ifExists);
        PayMethodDao.dropTable(db, ifExists);
        AMKindDao.dropTable(db, ifExists);
        SalesBillMasterDataDao.dropTable(db, ifExists);
        SalesBillDetail1DataDao.dropTable(db, ifExists);
        SalesOrderMasterDataDao.dropTable(db, ifExists);
        SalesOrderDetail1DataDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AccsetDao.class);
        registerDaoClass(AreaDao.class);
        registerDaoClass(DepartmentDao.class);
        registerDaoClass(EmployeeDao.class);
        registerDaoClass(OperatorDao.class);
        registerDaoClass(TraderDao.class);
        registerDaoClass(TradeTypeDao.class);
        registerDaoClass(IoTypeDao.class);
        registerDaoClass(StoreDao.class);
        registerDaoClass(GDTypeDao.class);
        registerDaoClass(GoodsDao.class);
        registerDaoClass(UnitDao.class);
        registerDaoClass(TraderPriceDao.class);
        registerDaoClass(GoodsPictureDao.class);
        registerDaoClass(OnHandDao.class);
        registerDaoClass(AccountDao.class);
        registerDaoClass(PayMethodDao.class);
        registerDaoClass(AMKindDao.class);
        registerDaoClass(SalesBillMasterDataDao.class);
        registerDaoClass(SalesBillDetail1DataDao.class);
        registerDaoClass(SalesOrderMasterDataDao.class);
        registerDaoClass(SalesOrderDetail1DataDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
