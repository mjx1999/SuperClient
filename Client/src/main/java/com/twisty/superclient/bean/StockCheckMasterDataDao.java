package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table STOCK_CHECK_MASTER_DATA.
 */
public class StockCheckMasterDataDao extends AbstractDao<StockCheckMasterData, Long> {

    public static final String TABLENAME = "STOCK_CHECK_MASTER_DATA";
    private DaoSession daoSession;
    ;

    public StockCheckMasterDataDao(DaoConfig config) {
        super(config);
    }


    public StockCheckMasterDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'STOCK_CHECK_MASTER_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'BILL_ID' INTEGER," + // 1: BillID
                "'CHECKOR_ID' INTEGER," + // 2: CheckorID
                "'EMP_ID' INTEGER," + // 3: EmpID
                "'OP_ID' INTEGER," + // 4: OpID
                "'IOTYPE_ID' INTEGER," + // 5: IOTypeID
                "'STORE_ID' INTEGER," + // 6: StoreID
                "'DEPARTMENT_ID' INTEGER," + // 7: DepartmentID
                "'AMOUNT' REAL," + // 8: Amount
                "'BILL_CODE' TEXT," + // 9: BillCode
                "'BILL_DATE' TEXT," + // 10: BillDate
                "'BILL_STATE_NAME' TEXT," + // 11: BillStateName
                "'CHECKOR_CODE' TEXT," + // 12: CheckorCode
                "'CHECKOR_NAME' TEXT," + // 13: CheckorName
                "'DEPARTMENT_NAME' TEXT," + // 14: DepartmentName
                "'DEPPARTMENT_CODE' TEXT," + // 15: DeppartmentCode
                "'EMP_CODE' TEXT," + // 16: EmpCode
                "'EMP_NAME' TEXT," + // 17: EmpName
                "'IOTYPE_NAME' TEXT," + // 18: IOTypeName
                "'OP_CODE' TEXT," + // 19: OpCode
                "'OP_NAME' TEXT," + // 20: OpName
                "'REMARK' TEXT," + // 21: Remark
                "'STORE_NAME' TEXT," + // 22: StoreName
                "'UPDATE_TIME' TEXT," + // 23: UpdateTime
                "'STORE_CODE' TEXT," + // 24: StoreCode
                "'BILL_STATE' INTEGER," + // 25: BillState
                "'REFER_COUNT' INTEGER," + // 26: ReferCount
                "'SFLAG' INTEGER," + // 27: SFlag
                "'USER_DEF1' INTEGER," + // 28: UserDef1
                "'USER_DEF2' INTEGER," + // 29: UserDef2
                "'USER_DEF3' INTEGER," + // 30: UserDef3
                "'USER_DEF4' INTEGER," + // 31: UserDef4
                "'USER_DEF5' INTEGER);"); // 32: UserDef5
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_STOCK_CHECK_MASTER_DATA__id ON STOCK_CHECK_MASTER_DATA" +
                " (_id);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_STOCK_CHECK_MASTER_DATA_BILL_ID ON STOCK_CHECK_MASTER_DATA" +
                " (BILL_ID);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STOCK_CHECK_MASTER_DATA'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, StockCheckMasterData entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long BillID = entity.getBillID();
        if (BillID != null) {
            stmt.bindLong(2, BillID);
        }

        Long CheckorID = entity.getCheckorID();
        if (CheckorID != null) {
            stmt.bindLong(3, CheckorID);
        }

        Long EmpID = entity.getEmpID();
        if (EmpID != null) {
            stmt.bindLong(4, EmpID);
        }

        Long OpID = entity.getOpID();
        if (OpID != null) {
            stmt.bindLong(5, OpID);
        }

        Long IOTypeID = entity.getIOTypeID();
        if (IOTypeID != null) {
            stmt.bindLong(6, IOTypeID);
        }

        Long StoreID = entity.getStoreID();
        if (StoreID != null) {
            stmt.bindLong(7, StoreID);
        }

        Long DepartmentID = entity.getDepartmentID();
        if (DepartmentID != null) {
            stmt.bindLong(8, DepartmentID);
        }

        Double Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindDouble(9, Amount);
        }

        String BillCode = entity.getBillCode();
        if (BillCode != null) {
            stmt.bindString(10, BillCode);
        }

        String BillDate = entity.getBillDate();
        if (BillDate != null) {
            stmt.bindString(11, BillDate);
        }

        String BillStateName = entity.getBillStateName();
        if (BillStateName != null) {
            stmt.bindString(12, BillStateName);
        }

        String CheckorCode = entity.getCheckorCode();
        if (CheckorCode != null) {
            stmt.bindString(13, CheckorCode);
        }

        String CheckorName = entity.getCheckorName();
        if (CheckorName != null) {
            stmt.bindString(14, CheckorName);
        }

        String DepartmentName = entity.getDepartmentName();
        if (DepartmentName != null) {
            stmt.bindString(15, DepartmentName);
        }

        String DeppartmentCode = entity.getDeppartmentCode();
        if (DeppartmentCode != null) {
            stmt.bindString(16, DeppartmentCode);
        }

        String EmpCode = entity.getEmpCode();
        if (EmpCode != null) {
            stmt.bindString(17, EmpCode);
        }

        String EmpName = entity.getEmpName();
        if (EmpName != null) {
            stmt.bindString(18, EmpName);
        }

        String IOTypeName = entity.getIOTypeName();
        if (IOTypeName != null) {
            stmt.bindString(19, IOTypeName);
        }

        String OpCode = entity.getOpCode();
        if (OpCode != null) {
            stmt.bindString(20, OpCode);
        }

        String OpName = entity.getOpName();
        if (OpName != null) {
            stmt.bindString(21, OpName);
        }

        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(22, Remark);
        }

        String StoreName = entity.getStoreName();
        if (StoreName != null) {
            stmt.bindString(23, StoreName);
        }

        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(24, UpdateTime);
        }

        String StoreCode = entity.getStoreCode();
        if (StoreCode != null) {
            stmt.bindString(25, StoreCode);
        }

        Integer BillState = entity.getBillState();
        if (BillState != null) {
            stmt.bindLong(26, BillState);
        }

        Integer ReferCount = entity.getReferCount();
        if (ReferCount != null) {
            stmt.bindLong(27, ReferCount);
        }

        Integer SFlag = entity.getSFlag();
        if (SFlag != null) {
            stmt.bindLong(28, SFlag);
        }

        Integer UserDef1 = entity.getUserDef1();
        if (UserDef1 != null) {
            stmt.bindLong(29, UserDef1);
        }

        Integer UserDef2 = entity.getUserDef2();
        if (UserDef2 != null) {
            stmt.bindLong(30, UserDef2);
        }

        Integer UserDef3 = entity.getUserDef3();
        if (UserDef3 != null) {
            stmt.bindLong(31, UserDef3);
        }

        Integer UserDef4 = entity.getUserDef4();
        if (UserDef4 != null) {
            stmt.bindLong(32, UserDef4);
        }

        Integer UserDef5 = entity.getUserDef5();
        if (UserDef5 != null) {
            stmt.bindLong(33, UserDef5);
        }
    }

    @Override
    protected void attachEntity(StockCheckMasterData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public StockCheckMasterData readEntity(Cursor cursor, int offset) {
        StockCheckMasterData entity = new StockCheckMasterData( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // BillID
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // CheckorID
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // EmpID
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // OpID
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // IOTypeID
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // StoreID
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // DepartmentID
                cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // Amount
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // BillCode
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // BillDate
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BillStateName
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // CheckorCode
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CheckorName
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // DepartmentName
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // DeppartmentCode
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // EmpCode
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // EmpName
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // IOTypeName
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // OpCode
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // OpName
                cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Remark
                cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // StoreName
                cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // UpdateTime
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // StoreCode
                cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // BillState
                cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // ReferCount
                cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // SFlag
                cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // UserDef1
                cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // UserDef2
                cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // UserDef3
                cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // UserDef4
                cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32) // UserDef5
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, StockCheckMasterData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCheckorID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEmpID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setOpID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIOTypeID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStoreID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDepartmentID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setAmount(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setBillCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBillDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBillStateName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCheckorCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCheckorName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDepartmentName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDeppartmentCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEmpCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setEmpName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIOTypeName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOpCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setOpName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRemark(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setStoreName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUpdateTime(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setStoreCode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setBillState(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setReferCount(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setSFlag(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setUserDef1(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setUserDef2(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setUserDef3(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setUserDef4(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setUserDef5(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(StockCheckMasterData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(StockCheckMasterData entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity StockCheckMasterData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BillID = new Property(1, Long.class, "BillID", false, "BILL_ID");
        public final static Property CheckorID = new Property(2, Long.class, "CheckorID", false, "CHECKOR_ID");
        public final static Property EmpID = new Property(3, Long.class, "EmpID", false, "EMP_ID");
        public final static Property OpID = new Property(4, Long.class, "OpID", false, "OP_ID");
        public final static Property IOTypeID = new Property(5, Long.class, "IOTypeID", false, "IOTYPE_ID");
        public final static Property StoreID = new Property(6, Long.class, "StoreID", false, "STORE_ID");
        public final static Property DepartmentID = new Property(7, Long.class, "DepartmentID", false, "DEPARTMENT_ID");
        public final static Property Amount = new Property(8, Double.class, "Amount", false, "AMOUNT");
        public final static Property BillCode = new Property(9, String.class, "BillCode", false, "BILL_CODE");
        public final static Property BillDate = new Property(10, String.class, "BillDate", false, "BILL_DATE");
        public final static Property BillStateName = new Property(11, String.class, "BillStateName", false, "BILL_STATE_NAME");
        public final static Property CheckorCode = new Property(12, String.class, "CheckorCode", false, "CHECKOR_CODE");
        public final static Property CheckorName = new Property(13, String.class, "CheckorName", false, "CHECKOR_NAME");
        public final static Property DepartmentName = new Property(14, String.class, "DepartmentName", false, "DEPARTMENT_NAME");
        public final static Property DeppartmentCode = new Property(15, String.class, "DeppartmentCode", false, "DEPPARTMENT_CODE");
        public final static Property EmpCode = new Property(16, String.class, "EmpCode", false, "EMP_CODE");
        public final static Property EmpName = new Property(17, String.class, "EmpName", false, "EMP_NAME");
        public final static Property IOTypeName = new Property(18, String.class, "IOTypeName", false, "IOTYPE_NAME");
        public final static Property OpCode = new Property(19, String.class, "OpCode", false, "OP_CODE");
        public final static Property OpName = new Property(20, String.class, "OpName", false, "OP_NAME");
        public final static Property Remark = new Property(21, String.class, "Remark", false, "REMARK");
        public final static Property StoreName = new Property(22, String.class, "StoreName", false, "STORE_NAME");
        public final static Property UpdateTime = new Property(23, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property StoreCode = new Property(24, String.class, "StoreCode", false, "STORE_CODE");
        public final static Property BillState = new Property(25, Integer.class, "BillState", false, "BILL_STATE");
        public final static Property ReferCount = new Property(26, Integer.class, "ReferCount", false, "REFER_COUNT");
        public final static Property SFlag = new Property(27, Integer.class, "SFlag", false, "SFLAG");
        public final static Property UserDef1 = new Property(28, Integer.class, "UserDef1", false, "USER_DEF1");
        public final static Property UserDef2 = new Property(29, Integer.class, "UserDef2", false, "USER_DEF2");
        public final static Property UserDef3 = new Property(30, Integer.class, "UserDef3", false, "USER_DEF3");
        public final static Property UserDef4 = new Property(31, Integer.class, "UserDef4", false, "USER_DEF4");
        public final static Property UserDef5 = new Property(32, Integer.class, "UserDef5", false, "USER_DEF5");
    }

}
