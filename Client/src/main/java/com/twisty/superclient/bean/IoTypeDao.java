package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.IoType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IO_TYPE.
*/
public class IoTypeDao extends AbstractDao<IoType, Void> {

    public static final String TABLENAME = "IO_TYPE";

    /**
     * Properties of entity IoType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IoTypeID = new Property(0, Long.class, "IoTypeID", false, "IO_TYPE_ID");
        public final static Property IoTypeCode = new Property(1, String.class, "IoTypeCode", false, "IO_TYPE_CODE");
        public final static Property IoTypeName = new Property(2, String.class, "IoTypeName", false, "IO_TYPE_NAME");
        public final static Property IoFlag = new Property(3, Integer.class, "IoFlag", false, "IO_FLAG");
        public final static Property Closed = new Property(4, Integer.class, "Closed", false, "CLOSED");
    };


    public IoTypeDao(DaoConfig config) {
        super(config);
    }
    
    public IoTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IO_TYPE' (" + //
                "'IO_TYPE_ID' INTEGER," + // 0: IoTypeID
                "'IO_TYPE_CODE' TEXT," + // 1: IoTypeCode
                "'IO_TYPE_NAME' TEXT," + // 2: IoTypeName
                "'IO_FLAG' INTEGER," + // 3: IoFlag
                "'CLOSED' INTEGER);"); // 4: Closed
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_IO_TYPE_IO_TYPE_ID ON IO_TYPE" +
                " (IO_TYPE_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IO_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IoType entity) {
        stmt.clearBindings();
 
        Long IoTypeID = entity.getIoTypeID();
        if (IoTypeID != null) {
            stmt.bindLong(1, IoTypeID);
        }
 
        String IoTypeCode = entity.getIoTypeCode();
        if (IoTypeCode != null) {
            stmt.bindString(2, IoTypeCode);
        }
 
        String IoTypeName = entity.getIoTypeName();
        if (IoTypeName != null) {
            stmt.bindString(3, IoTypeName);
        }
 
        Integer IoFlag = entity.getIoFlag();
        if (IoFlag != null) {
            stmt.bindLong(4, IoFlag);
        }
 
        Integer Closed = entity.getClosed();
        if (Closed != null) {
            stmt.bindLong(5, Closed);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public IoType readEntity(Cursor cursor, int offset) {
        IoType entity = new IoType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // IoTypeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // IoTypeCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // IoTypeName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // IoFlag
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // Closed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IoType entity, int offset) {
        entity.setIoTypeID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIoTypeCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIoTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIoFlag(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setClosed(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(IoType entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(IoType entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
