package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.Operator;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OPERATOR.
*/
public class OperatorDao extends AbstractDao<Operator, Void> {

    public static final String TABLENAME = "OPERATOR";

    /**
     * Properties of entity Operator.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OpID = new Property(0, Long.class, "OpID", false, "OP_ID");
        public final static Property OpCode = new Property(1, String.class, "OpCode", false, "OP_CODE");
        public final static Property OpName = new Property(2, String.class, "OpName", false, "OP_NAME");
        public final static Property OpPassword = new Property(3, String.class, "OpPassword", false, "OP_PASSWORD");
        public final static Property SysManager = new Property(4, String.class, "SysManager", false, "SYS_MANAGER");
        public final static Property ShopID = new Property(5, Long.class, "ShopID", false, "SHOP_ID");
    };


    public OperatorDao(DaoConfig config) {
        super(config);
    }
    
    public OperatorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OPERATOR' (" + //
                "'OP_ID' INTEGER," + // 0: OpID
                "'OP_CODE' TEXT," + // 1: OpCode
                "'OP_NAME' TEXT," + // 2: OpName
                "'OP_PASSWORD' TEXT," + // 3: OpPassword
                "'SYS_MANAGER' TEXT," + // 4: SysManager
                "'SHOP_ID' INTEGER);"); // 5: ShopID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OPERATOR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Operator entity) {
        stmt.clearBindings();
 
        Long OpID = entity.getOpID();
        if (OpID != null) {
            stmt.bindLong(1, OpID);
        }
 
        String OpCode = entity.getOpCode();
        if (OpCode != null) {
            stmt.bindString(2, OpCode);
        }
 
        String OpName = entity.getOpName();
        if (OpName != null) {
            stmt.bindString(3, OpName);
        }
 
        String OpPassword = entity.getOpPassword();
        if (OpPassword != null) {
            stmt.bindString(4, OpPassword);
        }
 
        String SysManager = entity.getSysManager();
        if (SysManager != null) {
            stmt.bindString(5, SysManager);
        }
 
        Long ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(6, ShopID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Operator readEntity(Cursor cursor, int offset) {
        Operator entity = new Operator( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // OpID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // OpCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // OpName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // OpPassword
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SysManager
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // ShopID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Operator entity, int offset) {
        entity.setOpID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOpPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSysManager(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShopID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Operator entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Operator entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
