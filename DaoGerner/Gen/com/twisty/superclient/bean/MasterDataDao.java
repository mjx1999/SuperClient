package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.MasterData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MASTER_DATA.
*/
public class MasterDataDao extends AbstractDao<MasterData, Void> {

    public static final String TABLENAME = "MASTER_DATA";

    /**
     * Properties of entity MasterData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BillID = new Property(0, Long.class, "BillID", false, "BILL_ID");
        public final static Property BillKind = new Property(1, Integer.class, "BillKind", false, "BILL_KIND");
        public final static Property BillState = new Property(2, Integer.class, "BillState", false, "BILL_STATE");
        public final static Property BillCode = new Property(3, String.class, "BillCode", false, "BILL_CODE");
        public final static Property BillDate = new Property(4, String.class, "BillDate", false, "BILL_DATE");
        public final static Property BillTo = new Property(5, String.class, "BillTo", false, "BILL_TO");
        public final static Property AccountID = new Property(6, Long.class, "AccountID", false, "ACCOUNT_ID");
        public final static Property Amount = new Property(7, Double.class, "Amount", false, "AMOUNT");
        public final static Property CheckNo = new Property(8, String.class, "CheckNo", false, "CHECK_NO");
        public final static Property ContactFax = new Property(9, String.class, "ContactFax", false, "CONTACT_FAX");
        public final static Property ContactPhone = new Property(10, String.class, "ContactPhone", false, "CONTACT_PHONE");
        public final static Property DepartmentID = new Property(11, Long.class, "DepartmentID", false, "DEPARTMENT_ID");
        public final static Property Disc = new Property(12, Double.class, "Disc", false, "DISC");
        public final static Property EmpID = new Property(13, Long.class, "EmpID", false, "EMP_ID");
        public final static Property LinkManID = new Property(14, Long.class, "LinkManID", false, "LINK_MAN_ID");
        public final static Property Linkman = new Property(15, String.class, "Linkman", false, "LINKMAN");
        public final static Property NoteNo = new Property(16, String.class, "NoteNo", false, "NOTE_NO");
        public final static Property NoteTypeID = new Property(17, Long.class, "NoteTypeID", false, "NOTE_TYPE_ID");
        public final static Property OpID = new Property(18, Long.class, "OpID", false, "OP_ID");
        public final static Property PayAmt = new Property(19, Double.class, "PayAmt", false, "PAY_AMT");
        public final static Property PayDate = new Property(20, String.class, "PayDate", false, "PAY_DATE");
        public final static Property PayMethodID = new Property(21, Long.class, "PayMethodID", false, "PAY_METHOD_ID");
        public final static Property Printed = new Property(22, Integer.class, "Printed", false, "PRINTED");
        public final static Property Remark = new Property(23, String.class, "Remark", false, "REMARK");
        public final static Property SFlag = new Property(24, Integer.class, "SFlag", false, "SFLAG");
        public final static Property ShipType = new Property(25, Long.class, "ShipType", false, "SHIP_TYPE");
        public final static Property ShopID = new Property(26, Long.class, "ShopID", false, "SHOP_ID");
        public final static Property TermDays = new Property(27, Integer.class, "TermDays", false, "TERM_DAYS");
        public final static Property TraderID = new Property(28, Long.class, "TraderID", false, "TRADER_ID");
        public final static Property UpdateTime = new Property(29, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property UserDef1 = new Property(30, String.class, "UserDef1", false, "USER_DEF1");
        public final static Property UserDef2 = new Property(31, String.class, "UserDef2", false, "USER_DEF2");
        public final static Property UserDef3 = new Property(32, String.class, "UserDef3", false, "USER_DEF3");
        public final static Property UserDef4 = new Property(33, String.class, "UserDef4", false, "USER_DEF4");
        public final static Property UserDef5 = new Property(34, String.class, "UserDef5", false, "USER_DEF5");
    };


    public MasterDataDao(DaoConfig config) {
        super(config);
    }
    
    public MasterDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MASTER_DATA' (" + //
                "'BILL_ID' INTEGER," + // 0: BillID
                "'BILL_KIND' INTEGER," + // 1: BillKind
                "'BILL_STATE' INTEGER," + // 2: BillState
                "'BILL_CODE' TEXT," + // 3: BillCode
                "'BILL_DATE' TEXT," + // 4: BillDate
                "'BILL_TO' TEXT," + // 5: BillTo
                "'ACCOUNT_ID' INTEGER," + // 6: AccountID
                "'AMOUNT' REAL," + // 7: Amount
                "'CHECK_NO' TEXT," + // 8: CheckNo
                "'CONTACT_FAX' TEXT," + // 9: ContactFax
                "'CONTACT_PHONE' TEXT," + // 10: ContactPhone
                "'DEPARTMENT_ID' INTEGER," + // 11: DepartmentID
                "'DISC' REAL," + // 12: Disc
                "'EMP_ID' INTEGER," + // 13: EmpID
                "'LINK_MAN_ID' INTEGER," + // 14: LinkManID
                "'LINKMAN' TEXT," + // 15: Linkman
                "'NOTE_NO' TEXT," + // 16: NoteNo
                "'NOTE_TYPE_ID' INTEGER," + // 17: NoteTypeID
                "'OP_ID' INTEGER," + // 18: OpID
                "'PAY_AMT' REAL," + // 19: PayAmt
                "'PAY_DATE' TEXT," + // 20: PayDate
                "'PAY_METHOD_ID' INTEGER," + // 21: PayMethodID
                "'PRINTED' INTEGER," + // 22: Printed
                "'REMARK' TEXT," + // 23: Remark
                "'SFLAG' INTEGER," + // 24: SFlag
                "'SHIP_TYPE' INTEGER," + // 25: ShipType
                "'SHOP_ID' INTEGER," + // 26: ShopID
                "'TERM_DAYS' INTEGER," + // 27: TermDays
                "'TRADER_ID' INTEGER," + // 28: TraderID
                "'UPDATE_TIME' TEXT," + // 29: UpdateTime
                "'USER_DEF1' TEXT," + // 30: UserDef1
                "'USER_DEF2' TEXT," + // 31: UserDef2
                "'USER_DEF3' TEXT," + // 32: UserDef3
                "'USER_DEF4' TEXT," + // 33: UserDef4
                "'USER_DEF5' TEXT);"); // 34: UserDef5
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MASTER_DATA_BILL_ID ON MASTER_DATA" +
                " (BILL_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MASTER_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MasterData entity) {
        stmt.clearBindings();
 
        Long BillID = entity.getBillID();
        if (BillID != null) {
            stmt.bindLong(1, BillID);
        }
 
        Integer BillKind = entity.getBillKind();
        if (BillKind != null) {
            stmt.bindLong(2, BillKind);
        }
 
        Integer BillState = entity.getBillState();
        if (BillState != null) {
            stmt.bindLong(3, BillState);
        }
 
        String BillCode = entity.getBillCode();
        if (BillCode != null) {
            stmt.bindString(4, BillCode);
        }
 
        String BillDate = entity.getBillDate();
        if (BillDate != null) {
            stmt.bindString(5, BillDate);
        }
 
        String BillTo = entity.getBillTo();
        if (BillTo != null) {
            stmt.bindString(6, BillTo);
        }
 
        Long AccountID = entity.getAccountID();
        if (AccountID != null) {
            stmt.bindLong(7, AccountID);
        }
 
        Double Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindDouble(8, Amount);
        }
 
        String CheckNo = entity.getCheckNo();
        if (CheckNo != null) {
            stmt.bindString(9, CheckNo);
        }
 
        String ContactFax = entity.getContactFax();
        if (ContactFax != null) {
            stmt.bindString(10, ContactFax);
        }
 
        String ContactPhone = entity.getContactPhone();
        if (ContactPhone != null) {
            stmt.bindString(11, ContactPhone);
        }
 
        Long DepartmentID = entity.getDepartmentID();
        if (DepartmentID != null) {
            stmt.bindLong(12, DepartmentID);
        }
 
        Double Disc = entity.getDisc();
        if (Disc != null) {
            stmt.bindDouble(13, Disc);
        }
 
        Long EmpID = entity.getEmpID();
        if (EmpID != null) {
            stmt.bindLong(14, EmpID);
        }
 
        Long LinkManID = entity.getLinkManID();
        if (LinkManID != null) {
            stmt.bindLong(15, LinkManID);
        }
 
        String Linkman = entity.getLinkman();
        if (Linkman != null) {
            stmt.bindString(16, Linkman);
        }
 
        String NoteNo = entity.getNoteNo();
        if (NoteNo != null) {
            stmt.bindString(17, NoteNo);
        }
 
        Long NoteTypeID = entity.getNoteTypeID();
        if (NoteTypeID != null) {
            stmt.bindLong(18, NoteTypeID);
        }
 
        Long OpID = entity.getOpID();
        if (OpID != null) {
            stmt.bindLong(19, OpID);
        }
 
        Double PayAmt = entity.getPayAmt();
        if (PayAmt != null) {
            stmt.bindDouble(20, PayAmt);
        }
 
        String PayDate = entity.getPayDate();
        if (PayDate != null) {
            stmt.bindString(21, PayDate);
        }
 
        Long PayMethodID = entity.getPayMethodID();
        if (PayMethodID != null) {
            stmt.bindLong(22, PayMethodID);
        }
 
        Integer Printed = entity.getPrinted();
        if (Printed != null) {
            stmt.bindLong(23, Printed);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(24, Remark);
        }
 
        Integer SFlag = entity.getSFlag();
        if (SFlag != null) {
            stmt.bindLong(25, SFlag);
        }
 
        Long ShipType = entity.getShipType();
        if (ShipType != null) {
            stmt.bindLong(26, ShipType);
        }
 
        Long ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(27, ShopID);
        }
 
        Integer TermDays = entity.getTermDays();
        if (TermDays != null) {
            stmt.bindLong(28, TermDays);
        }
 
        Long TraderID = entity.getTraderID();
        if (TraderID != null) {
            stmt.bindLong(29, TraderID);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(30, UpdateTime);
        }
 
        String UserDef1 = entity.getUserDef1();
        if (UserDef1 != null) {
            stmt.bindString(31, UserDef1);
        }
 
        String UserDef2 = entity.getUserDef2();
        if (UserDef2 != null) {
            stmt.bindString(32, UserDef2);
        }
 
        String UserDef3 = entity.getUserDef3();
        if (UserDef3 != null) {
            stmt.bindString(33, UserDef3);
        }
 
        String UserDef4 = entity.getUserDef4();
        if (UserDef4 != null) {
            stmt.bindString(34, UserDef4);
        }
 
        String UserDef5 = entity.getUserDef5();
        if (UserDef5 != null) {
            stmt.bindString(35, UserDef5);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MasterData readEntity(Cursor cursor, int offset) {
        MasterData entity = new MasterData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // BillID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // BillKind
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // BillState
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BillCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BillDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BillTo
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // AccountID
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // Amount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CheckNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ContactFax
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ContactPhone
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // DepartmentID
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // Disc
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // EmpID
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // LinkManID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Linkman
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // NoteNo
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // NoteTypeID
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // OpID
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // PayAmt
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // PayDate
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // PayMethodID
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // Printed
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Remark
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // SFlag
            cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25), // ShipType
            cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26), // ShopID
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // TermDays
            cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28), // TraderID
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // UpdateTime
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // UserDef1
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // UserDef2
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // UserDef3
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // UserDef4
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34) // UserDef5
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MasterData entity, int offset) {
        entity.setBillID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillKind(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBillState(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBillCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBillDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBillTo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccountID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAmount(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setCheckNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContactFax(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContactPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDepartmentID(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setDisc(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setEmpID(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setLinkManID(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setLinkman(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNoteNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNoteTypeID(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setOpID(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setPayAmt(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setPayDate(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPayMethodID(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setPrinted(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setRemark(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSFlag(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setShipType(cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25));
        entity.setShopID(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
        entity.setTermDays(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setTraderID(cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28));
        entity.setUpdateTime(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setUserDef1(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setUserDef2(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setUserDef3(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setUserDef4(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setUserDef5(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MasterData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MasterData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
