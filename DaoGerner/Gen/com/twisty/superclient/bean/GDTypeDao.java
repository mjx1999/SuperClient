package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.GDType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GDTYPE.
*/
public class GDTypeDao extends AbstractDao<GDType, Void> {

    public static final String TABLENAME = "GDTYPE";

    /**
     * Properties of entity GDType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GDTypeID = new Property(0, Long.class, "GDTypeID", false, "GDTYPE_ID");
        public final static Property GDTypeCode = new Property(1, String.class, "GDTypeCode", false, "GDTYPE_CODE");
        public final static Property GDTypeName = new Property(2, String.class, "GDTypeName", false, "GDTYPE_NAME");
        public final static Property ParentID = new Property(3, Long.class, "ParentID", false, "PARENT_ID");
        public final static Property LCode = new Property(4, String.class, "LCode", false, "LCODE");
        public final static Property Closed = new Property(5, Integer.class, "Closed", false, "CLOSED");
    };


    public GDTypeDao(DaoConfig config) {
        super(config);
    }
    
    public GDTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GDTYPE' (" + //
                "'GDTYPE_ID' INTEGER," + // 0: GDTypeID
                "'GDTYPE_CODE' TEXT," + // 1: GDTypeCode
                "'GDTYPE_NAME' TEXT," + // 2: GDTypeName
                "'PARENT_ID' INTEGER," + // 3: ParentID
                "'LCODE' TEXT," + // 4: LCode
                "'CLOSED' INTEGER);"); // 5: Closed
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_GDTYPE_GDTYPE_ID ON GDTYPE" +
                " (GDTYPE_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GDTYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GDType entity) {
        stmt.clearBindings();
 
        Long GDTypeID = entity.getGDTypeID();
        if (GDTypeID != null) {
            stmt.bindLong(1, GDTypeID);
        }
 
        String GDTypeCode = entity.getGDTypeCode();
        if (GDTypeCode != null) {
            stmt.bindString(2, GDTypeCode);
        }
 
        String GDTypeName = entity.getGDTypeName();
        if (GDTypeName != null) {
            stmt.bindString(3, GDTypeName);
        }
 
        Long ParentID = entity.getParentID();
        if (ParentID != null) {
            stmt.bindLong(4, ParentID);
        }
 
        String LCode = entity.getLCode();
        if (LCode != null) {
            stmt.bindString(5, LCode);
        }
 
        Integer Closed = entity.getClosed();
        if (Closed != null) {
            stmt.bindLong(6, Closed);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public GDType readEntity(Cursor cursor, int offset) {
        GDType entity = new GDType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // GDTypeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // GDTypeCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // GDTypeName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // ParentID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // LCode
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // Closed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GDType entity, int offset) {
        entity.setGDTypeID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGDTypeCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGDTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setLCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClosed(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(GDType entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(GDType entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
