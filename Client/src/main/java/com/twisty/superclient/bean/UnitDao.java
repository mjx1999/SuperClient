package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table UNIT.
 */
public class UnitDao extends AbstractDao<Unit, Void> {

    public static final String TABLENAME = "UNIT";

    public UnitDao(DaoConfig config) {
        super(config);
    }

    ;


    public UnitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'UNIT' (" + //
                "'UNIT_ID' INTEGER," + // 0: UnitID
                "'GOODS_ID' INTEGER," + // 1: GoodsID
                "'UNIT_NAME' TEXT," + // 2: UnitName
                "'BAR_CODE' TEXT," + // 3: BarCode
                "'RATE' REAL," + // 4: Rate
                "'IS_BASE' INTEGER," + // 5: IsBase
                "'SPRICE' REAL," + // 6: SPrice
                "'PPRICE' REAL," + // 7: PPrice
                "'HIGH_PRICE' REAL," + // 8: HighPrice
                "'LOW_PRICE' REAL," + // 9: LowPrice
                "'VIP_PRICE' REAL," + // 10: VipPrice
                "'LPRICE1' REAL," + // 11: LPrice1
                "'LPRICE2' REAL," + // 12: LPrice2
                "'LPRICE3' REAL," + // 13: LPrice3
                "'LPRICE4' REAL," + // 14: LPrice4
                "'LPRICE5' REAL," + // 15: LPrice5
                "'IS_SALE' INTEGER," + // 16: IsSale
                "'IS_PURCHASE' INTEGER," + // 17: IsPurchase
                "'IS_STORE' INTEGER);"); // 18: IsStore
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_UNIT_UNIT_ID ON UNIT" +
                " (UNIT_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_UNIT_GOODS_ID ON UNIT" +
                " (GOODS_ID);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UNIT'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Unit entity) {
        stmt.clearBindings();

        Long UnitID = entity.getUnitID();
        if (UnitID != null) {
            stmt.bindLong(1, UnitID);
        }

        Long GoodsID = entity.getGoodsID();
        if (GoodsID != null) {
            stmt.bindLong(2, GoodsID);
        }

        String UnitName = entity.getUnitName();
        if (UnitName != null) {
            stmt.bindString(3, UnitName);
        }

        String BarCode = entity.getBarCode();
        if (BarCode != null) {
            stmt.bindString(4, BarCode);
        }

        Double Rate = entity.getRate();
        if (Rate != null) {
            stmt.bindDouble(5, Rate);
        }

        Integer IsBase = entity.getIsBase();
        if (IsBase != null) {
            stmt.bindLong(6, IsBase);
        }

        Double SPrice = entity.getSPrice();
        if (SPrice != null) {
            stmt.bindDouble(7, SPrice);
        }

        Double PPrice = entity.getPPrice();
        if (PPrice != null) {
            stmt.bindDouble(8, PPrice);
        }

        Double HighPrice = entity.getHighPrice();
        if (HighPrice != null) {
            stmt.bindDouble(9, HighPrice);
        }

        Double LowPrice = entity.getLowPrice();
        if (LowPrice != null) {
            stmt.bindDouble(10, LowPrice);
        }

        Double VipPrice = entity.getVipPrice();
        if (VipPrice != null) {
            stmt.bindDouble(11, VipPrice);
        }

        Double LPrice1 = entity.getLPrice1();
        if (LPrice1 != null) {
            stmt.bindDouble(12, LPrice1);
        }

        Double LPrice2 = entity.getLPrice2();
        if (LPrice2 != null) {
            stmt.bindDouble(13, LPrice2);
        }

        Double LPrice3 = entity.getLPrice3();
        if (LPrice3 != null) {
            stmt.bindDouble(14, LPrice3);
        }

        Double LPrice4 = entity.getLPrice4();
        if (LPrice4 != null) {
            stmt.bindDouble(15, LPrice4);
        }

        Double LPrice5 = entity.getLPrice5();
        if (LPrice5 != null) {
            stmt.bindDouble(16, LPrice5);
        }

        Integer IsSale = entity.getIsSale();
        if (IsSale != null) {
            stmt.bindLong(17, IsSale);
        }

        Integer IsPurchase = entity.getIsPurchase();
        if (IsPurchase != null) {
            stmt.bindLong(18, IsPurchase);
        }

        Integer IsStore = entity.getIsStore();
        if (IsStore != null) {
            stmt.bindLong(19, IsStore);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Unit readEntity(Cursor cursor, int offset) {
        Unit entity = new Unit( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // UnitID
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // GoodsID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UnitName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BarCode
                cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // Rate
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // IsBase
                cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // SPrice
                cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // PPrice
                cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // HighPrice
                cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // LowPrice
                cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // VipPrice
                cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // LPrice1
                cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // LPrice2
                cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // LPrice3
                cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // LPrice4
                cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // LPrice5
                cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // IsSale
                cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // IsPurchase
                cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18) // IsStore
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Unit entity, int offset) {
        entity.setUnitID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUnitName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBarCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRate(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setIsBase(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSPrice(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setPPrice(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setHighPrice(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLowPrice(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setVipPrice(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setLPrice1(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setLPrice2(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setLPrice3(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setLPrice4(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setLPrice5(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setIsSale(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setIsPurchase(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setIsStore(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(Unit entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(Unit entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Unit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UnitID = new Property(0, Long.class, "UnitID", false, "UNIT_ID");
        public final static Property GoodsID = new Property(1, Long.class, "GoodsID", false, "GOODS_ID");
        public final static Property UnitName = new Property(2, String.class, "UnitName", false, "UNIT_NAME");
        public final static Property BarCode = new Property(3, String.class, "BarCode", false, "BAR_CODE");
        public final static Property Rate = new Property(4, Double.class, "Rate", false, "RATE");
        public final static Property IsBase = new Property(5, Integer.class, "IsBase", false, "IS_BASE");
        public final static Property SPrice = new Property(6, Double.class, "SPrice", false, "SPRICE");
        public final static Property PPrice = new Property(7, Double.class, "PPrice", false, "PPRICE");
        public final static Property HighPrice = new Property(8, Double.class, "HighPrice", false, "HIGH_PRICE");
        public final static Property LowPrice = new Property(9, Double.class, "LowPrice", false, "LOW_PRICE");
        public final static Property VipPrice = new Property(10, Double.class, "VipPrice", false, "VIP_PRICE");
        public final static Property LPrice1 = new Property(11, Double.class, "LPrice1", false, "LPRICE1");
        public final static Property LPrice2 = new Property(12, Double.class, "LPrice2", false, "LPRICE2");
        public final static Property LPrice3 = new Property(13, Double.class, "LPrice3", false, "LPRICE3");
        public final static Property LPrice4 = new Property(14, Double.class, "LPrice4", false, "LPRICE4");
        public final static Property LPrice5 = new Property(15, Double.class, "LPrice5", false, "LPRICE5");
        public final static Property IsSale = new Property(16, Integer.class, "IsSale", false, "IS_SALE");
        public final static Property IsPurchase = new Property(17, Integer.class, "IsPurchase", false, "IS_PURCHASE");
        public final static Property IsStore = new Property(18, Integer.class, "IsStore", false, "IS_STORE");
    }

}
