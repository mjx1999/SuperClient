package com.twisty.superclient.bean;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 *
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig accsetDaoConfig;
    private final DaoConfig areaDaoConfig;
    private final DaoConfig departmentDaoConfig;
    private final DaoConfig employeeDaoConfig;
    private final DaoConfig operatorDaoConfig;
    private final DaoConfig traderDaoConfig;
    private final DaoConfig tradeTypeDaoConfig;
    private final DaoConfig ioTypeDaoConfig;
    private final DaoConfig storeDaoConfig;
    private final DaoConfig gDTypeDaoConfig;
    private final DaoConfig goodsDaoConfig;
    private final DaoConfig unitDaoConfig;
    private final DaoConfig traderPriceDaoConfig;
    private final DaoConfig goodsPictureDaoConfig;
    private final DaoConfig onHandDaoConfig;
    private final DaoConfig accountDaoConfig;
    private final DaoConfig payMethodDaoConfig;
    private final DaoConfig aMKindDaoConfig;
    private final DaoConfig salesBillDetail1DataDaoConfig;
    private final DaoConfig salesBillMasterDataDaoConfig;
    private final DaoConfig salesOrderDetail1DataDaoConfig;
    private final DaoConfig salesOrderMasterDataDaoConfig;
    private final DaoConfig transferDetail1DataDaoConfig;
    private final DaoConfig transferMasterDataDaoConfig;
    private final DaoConfig stockCheckDetail1DataDaoConfig;
    private final DaoConfig stockCheckMasterDataDaoConfig;
    private final DaoConfig sysParamDaoConfig;

    private final AccsetDao accsetDao;
    private final AreaDao areaDao;
    private final DepartmentDao departmentDao;
    private final EmployeeDao employeeDao;
    private final OperatorDao operatorDao;
    private final TraderDao traderDao;
    private final TradeTypeDao tradeTypeDao;
    private final IoTypeDao ioTypeDao;
    private final StoreDao storeDao;
    private final GDTypeDao gDTypeDao;
    private final GoodsDao goodsDao;
    private final UnitDao unitDao;
    private final TraderPriceDao traderPriceDao;
    private final GoodsPictureDao goodsPictureDao;
    private final OnHandDao onHandDao;
    private final AccountDao accountDao;
    private final PayMethodDao payMethodDao;
    private final AMKindDao aMKindDao;
    private final SalesBillDetail1DataDao salesBillDetail1DataDao;
    private final SalesBillMasterDataDao salesBillMasterDataDao;
    private final SalesOrderDetail1DataDao salesOrderDetail1DataDao;
    private final SalesOrderMasterDataDao salesOrderMasterDataDao;
    private final TransferDetail1DataDao transferDetail1DataDao;
    private final TransferMasterDataDao transferMasterDataDao;
    private final StockCheckDetail1DataDao stockCheckDetail1DataDao;
    private final StockCheckMasterDataDao stockCheckMasterDataDao;
    private final SysParamDao sysParamDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        accsetDaoConfig = daoConfigMap.get(AccsetDao.class).clone();
        accsetDaoConfig.initIdentityScope(type);

        areaDaoConfig = daoConfigMap.get(AreaDao.class).clone();
        areaDaoConfig.initIdentityScope(type);

        departmentDaoConfig = daoConfigMap.get(DepartmentDao.class).clone();
        departmentDaoConfig.initIdentityScope(type);

        employeeDaoConfig = daoConfigMap.get(EmployeeDao.class).clone();
        employeeDaoConfig.initIdentityScope(type);

        operatorDaoConfig = daoConfigMap.get(OperatorDao.class).clone();
        operatorDaoConfig.initIdentityScope(type);

        traderDaoConfig = daoConfigMap.get(TraderDao.class).clone();
        traderDaoConfig.initIdentityScope(type);

        tradeTypeDaoConfig = daoConfigMap.get(TradeTypeDao.class).clone();
        tradeTypeDaoConfig.initIdentityScope(type);

        ioTypeDaoConfig = daoConfigMap.get(IoTypeDao.class).clone();
        ioTypeDaoConfig.initIdentityScope(type);

        storeDaoConfig = daoConfigMap.get(StoreDao.class).clone();
        storeDaoConfig.initIdentityScope(type);

        gDTypeDaoConfig = daoConfigMap.get(GDTypeDao.class).clone();
        gDTypeDaoConfig.initIdentityScope(type);

        goodsDaoConfig = daoConfigMap.get(GoodsDao.class).clone();
        goodsDaoConfig.initIdentityScope(type);

        unitDaoConfig = daoConfigMap.get(UnitDao.class).clone();
        unitDaoConfig.initIdentityScope(type);

        traderPriceDaoConfig = daoConfigMap.get(TraderPriceDao.class).clone();
        traderPriceDaoConfig.initIdentityScope(type);

        goodsPictureDaoConfig = daoConfigMap.get(GoodsPictureDao.class).clone();
        goodsPictureDaoConfig.initIdentityScope(type);

        onHandDaoConfig = daoConfigMap.get(OnHandDao.class).clone();
        onHandDaoConfig.initIdentityScope(type);

        accountDaoConfig = daoConfigMap.get(AccountDao.class).clone();
        accountDaoConfig.initIdentityScope(type);

        payMethodDaoConfig = daoConfigMap.get(PayMethodDao.class).clone();
        payMethodDaoConfig.initIdentityScope(type);

        aMKindDaoConfig = daoConfigMap.get(AMKindDao.class).clone();
        aMKindDaoConfig.initIdentityScope(type);

        salesBillDetail1DataDaoConfig = daoConfigMap.get(SalesBillDetail1DataDao.class).clone();
        salesBillDetail1DataDaoConfig.initIdentityScope(type);

        salesBillMasterDataDaoConfig = daoConfigMap.get(SalesBillMasterDataDao.class).clone();
        salesBillMasterDataDaoConfig.initIdentityScope(type);

        salesOrderDetail1DataDaoConfig = daoConfigMap.get(SalesOrderDetail1DataDao.class).clone();
        salesOrderDetail1DataDaoConfig.initIdentityScope(type);

        salesOrderMasterDataDaoConfig = daoConfigMap.get(SalesOrderMasterDataDao.class).clone();
        salesOrderMasterDataDaoConfig.initIdentityScope(type);

        transferDetail1DataDaoConfig = daoConfigMap.get(TransferDetail1DataDao.class).clone();
        transferDetail1DataDaoConfig.initIdentityScope(type);

        transferMasterDataDaoConfig = daoConfigMap.get(TransferMasterDataDao.class).clone();
        transferMasterDataDaoConfig.initIdentityScope(type);

        stockCheckDetail1DataDaoConfig = daoConfigMap.get(StockCheckDetail1DataDao.class).clone();
        stockCheckDetail1DataDaoConfig.initIdentityScope(type);

        stockCheckMasterDataDaoConfig = daoConfigMap.get(StockCheckMasterDataDao.class).clone();
        stockCheckMasterDataDaoConfig.initIdentityScope(type);

        sysParamDaoConfig = daoConfigMap.get(SysParamDao.class).clone();
        sysParamDaoConfig.initIdentityScope(type);

        accsetDao = new AccsetDao(accsetDaoConfig, this);
        areaDao = new AreaDao(areaDaoConfig, this);
        departmentDao = new DepartmentDao(departmentDaoConfig, this);
        employeeDao = new EmployeeDao(employeeDaoConfig, this);
        operatorDao = new OperatorDao(operatorDaoConfig, this);
        traderDao = new TraderDao(traderDaoConfig, this);
        tradeTypeDao = new TradeTypeDao(tradeTypeDaoConfig, this);
        ioTypeDao = new IoTypeDao(ioTypeDaoConfig, this);
        storeDao = new StoreDao(storeDaoConfig, this);
        gDTypeDao = new GDTypeDao(gDTypeDaoConfig, this);
        goodsDao = new GoodsDao(goodsDaoConfig, this);
        unitDao = new UnitDao(unitDaoConfig, this);
        traderPriceDao = new TraderPriceDao(traderPriceDaoConfig, this);
        goodsPictureDao = new GoodsPictureDao(goodsPictureDaoConfig, this);
        onHandDao = new OnHandDao(onHandDaoConfig, this);
        accountDao = new AccountDao(accountDaoConfig, this);
        payMethodDao = new PayMethodDao(payMethodDaoConfig, this);
        aMKindDao = new AMKindDao(aMKindDaoConfig, this);
        salesBillDetail1DataDao = new SalesBillDetail1DataDao(salesBillDetail1DataDaoConfig, this);
        salesBillMasterDataDao = new SalesBillMasterDataDao(salesBillMasterDataDaoConfig, this);
        salesOrderDetail1DataDao = new SalesOrderDetail1DataDao(salesOrderDetail1DataDaoConfig, this);
        salesOrderMasterDataDao = new SalesOrderMasterDataDao(salesOrderMasterDataDaoConfig, this);
        transferDetail1DataDao = new TransferDetail1DataDao(transferDetail1DataDaoConfig, this);
        transferMasterDataDao = new TransferMasterDataDao(transferMasterDataDaoConfig, this);
        stockCheckDetail1DataDao = new StockCheckDetail1DataDao(stockCheckDetail1DataDaoConfig, this);
        stockCheckMasterDataDao = new StockCheckMasterDataDao(stockCheckMasterDataDaoConfig, this);
        sysParamDao = new SysParamDao(sysParamDaoConfig, this);

        registerDao(Accset.class, accsetDao);
        registerDao(Area.class, areaDao);
        registerDao(Department.class, departmentDao);
        registerDao(Employee.class, employeeDao);
        registerDao(Operator.class, operatorDao);
        registerDao(Trader.class, traderDao);
        registerDao(TradeType.class, tradeTypeDao);
        registerDao(IoType.class, ioTypeDao);
        registerDao(Store.class, storeDao);
        registerDao(GDType.class, gDTypeDao);
        registerDao(Goods.class, goodsDao);
        registerDao(Unit.class, unitDao);
        registerDao(TraderPrice.class, traderPriceDao);
        registerDao(GoodsPicture.class, goodsPictureDao);
        registerDao(OnHand.class, onHandDao);
        registerDao(Account.class, accountDao);
        registerDao(PayMethod.class, payMethodDao);
        registerDao(AMKind.class, aMKindDao);
        registerDao(SalesBillDetail1Data.class, salesBillDetail1DataDao);
        registerDao(SalesBillMasterData.class, salesBillMasterDataDao);
        registerDao(SalesOrderDetail1Data.class, salesOrderDetail1DataDao);
        registerDao(SalesOrderMasterData.class, salesOrderMasterDataDao);
        registerDao(TransferDetail1Data.class, transferDetail1DataDao);
        registerDao(TransferMasterData.class, transferMasterDataDao);
        registerDao(StockCheckDetail1Data.class, stockCheckDetail1DataDao);
        registerDao(StockCheckMasterData.class, stockCheckMasterDataDao);
        registerDao(SysParam.class, sysParamDao);
    }

    public void clear() {
        accsetDaoConfig.getIdentityScope().clear();
        areaDaoConfig.getIdentityScope().clear();
        departmentDaoConfig.getIdentityScope().clear();
        employeeDaoConfig.getIdentityScope().clear();
        operatorDaoConfig.getIdentityScope().clear();
        traderDaoConfig.getIdentityScope().clear();
        tradeTypeDaoConfig.getIdentityScope().clear();
        ioTypeDaoConfig.getIdentityScope().clear();
        storeDaoConfig.getIdentityScope().clear();
        gDTypeDaoConfig.getIdentityScope().clear();
        goodsDaoConfig.getIdentityScope().clear();
        unitDaoConfig.getIdentityScope().clear();
        traderPriceDaoConfig.getIdentityScope().clear();
        goodsPictureDaoConfig.getIdentityScope().clear();
        onHandDaoConfig.getIdentityScope().clear();
        accountDaoConfig.getIdentityScope().clear();
        payMethodDaoConfig.getIdentityScope().clear();
        aMKindDaoConfig.getIdentityScope().clear();
        salesBillDetail1DataDaoConfig.getIdentityScope().clear();
        salesBillMasterDataDaoConfig.getIdentityScope().clear();
        salesOrderDetail1DataDaoConfig.getIdentityScope().clear();
        salesOrderMasterDataDaoConfig.getIdentityScope().clear();
        transferDetail1DataDaoConfig.getIdentityScope().clear();
        transferMasterDataDaoConfig.getIdentityScope().clear();
        stockCheckDetail1DataDaoConfig.getIdentityScope().clear();
        stockCheckMasterDataDaoConfig.getIdentityScope().clear();
        sysParamDaoConfig.getIdentityScope().clear();
    }

    public AccsetDao getAccsetDao() {
        return accsetDao;
    }

    public AreaDao getAreaDao() {
        return areaDao;
    }

    public DepartmentDao getDepartmentDao() {
        return departmentDao;
    }

    public EmployeeDao getEmployeeDao() {
        return employeeDao;
    }

    public OperatorDao getOperatorDao() {
        return operatorDao;
    }

    public TraderDao getTraderDao() {
        return traderDao;
    }

    public TradeTypeDao getTradeTypeDao() {
        return tradeTypeDao;
    }

    public IoTypeDao getIoTypeDao() {
        return ioTypeDao;
    }

    public StoreDao getStoreDao() {
        return storeDao;
    }

    public GDTypeDao getGDTypeDao() {
        return gDTypeDao;
    }

    public GoodsDao getGoodsDao() {
        return goodsDao;
    }

    public UnitDao getUnitDao() {
        return unitDao;
    }

    public TraderPriceDao getTraderPriceDao() {
        return traderPriceDao;
    }

    public GoodsPictureDao getGoodsPictureDao() {
        return goodsPictureDao;
    }

    public OnHandDao getOnHandDao() {
        return onHandDao;
    }

    public AccountDao getAccountDao() {
        return accountDao;
    }

    public PayMethodDao getPayMethodDao() {
        return payMethodDao;
    }

    public AMKindDao getAMKindDao() {
        return aMKindDao;
    }

    public SalesBillDetail1DataDao getSalesBillDetail1DataDao() {
        return salesBillDetail1DataDao;
    }

    public SalesBillMasterDataDao getSalesBillMasterDataDao() {
        return salesBillMasterDataDao;
    }

    public SalesOrderDetail1DataDao getSalesOrderDetail1DataDao() {
        return salesOrderDetail1DataDao;
    }

    public SalesOrderMasterDataDao getSalesOrderMasterDataDao() {
        return salesOrderMasterDataDao;
    }

    public TransferDetail1DataDao getTransferDetail1DataDao() {
        return transferDetail1DataDao;
    }

    public TransferMasterDataDao getTransferMasterDataDao() {
        return transferMasterDataDao;
    }

    public StockCheckDetail1DataDao getStockCheckDetail1DataDao() {
        return stockCheckDetail1DataDao;
    }

    public StockCheckMasterDataDao getStockCheckMasterDataDao() {
        return stockCheckMasterDataDao;
    }

    public SysParamDao getSysParamDao() {
        return sysParamDao;
    }

}
