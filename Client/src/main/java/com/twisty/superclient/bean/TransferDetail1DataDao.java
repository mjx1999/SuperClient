package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TRANSFER_DETAIL1_DATA.
 */
public class TransferDetail1DataDao extends AbstractDao<TransferDetail1Data, Long> {

    public static final String TABLENAME = "TRANSFER_DETAIL1_DATA";
    private Query<TransferDetail1Data> transferMasterData_TransferDetail1DataListQuery;
    ;

    public TransferDetail1DataDao(DaoConfig config) {
        super(config);
    }

    public TransferDetail1DataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'TRANSFER_DETAIL1_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MASTER_ID' INTEGER," + // 1: MasterID
                "'BILL_ID' INTEGER," + // 2: BillID
                "'GOODS_ID' INTEGER," + // 3: GoodsID
                "'REFER_BILL_ID' INTEGER," + // 4: ReferBillID
                "'UNIT_ID' INTEGER," + // 5: UnitID
                "'ITEM_NO' INTEGER," + // 6: ItemNo
                "'REFER_COUNT' INTEGER," + // 7: ReferCount
                "'REFER_ITEM_NO' INTEGER," + // 8: ReferItemNo
                "'REFER_BILL_TYPE' INTEGER," + // 9: ReferBillType
                "'APRICE' REAL," + // 10: APrice
                "'BEFORE_PRICE' REAL," + // 11: BeforePrice
                "'AMOUNT' REAL," + // 12: Amount
                "'UNIT_PRICE' REAL," + // 13: UnitPrice
                "'PRICE' REAL," + // 14: Price
                "'QUANTITY' REAL," + // 15: Quantity
                "'IOQTY' REAL," + // 16: IOQty
                "'OIQTY' REAL," + // 17: OIQty
                "'UNIT_QUANTITY' REAL," + // 18: UnitQuantity
                "'UNIT_RATE' REAL," + // 19: UnitRate
                "'BAR_CODE' TEXT," + // 20: BarCode
                "'GOODS_CODE' TEXT," + // 21: GoodsCode
                "'REFER_BILL_CODE' TEXT," + // 22: ReferBillCode
                "'REMARK' TEXT," + // 23: Remark
                "'GOODS_NAME' TEXT," + // 24: GoodsName
                "'SHORT_NAME' TEXT," + // 25: ShortName
                "'SPECS' TEXT," + // 26: Specs
                "'UNIT_NAME' TEXT," + // 27: UnitName
                "'USER_DEF1' TEXT," + // 28: UserDef1
                "'USER_DEF2' TEXT," + // 29: UserDef2
                "'USER_DEF3' TEXT," + // 30: UserDef3
                "'USER_DEF4' TEXT," + // 31: UserDef4
                "'USER_DEF5' TEXT);"); // 32: UserDef5
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRANSFER_DETAIL1_DATA__id ON TRANSFER_DETAIL1_DATA" +
                " (_id);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRANSFER_DETAIL1_DATA_BILL_ID ON TRANSFER_DETAIL1_DATA" +
                " (BILL_ID);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRANSFER_DETAIL1_DATA'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransferDetail1Data entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long MasterID = entity.getMasterID();
        if (MasterID != null) {
            stmt.bindLong(2, MasterID);
        }

        Long BillID = entity.getBillID();
        if (BillID != null) {
            stmt.bindLong(3, BillID);
        }

        Long GoodsID = entity.getGoodsID();
        if (GoodsID != null) {
            stmt.bindLong(4, GoodsID);
        }

        Long ReferBillID = entity.getReferBillID();
        if (ReferBillID != null) {
            stmt.bindLong(5, ReferBillID);
        }

        Long UnitID = entity.getUnitID();
        if (UnitID != null) {
            stmt.bindLong(6, UnitID);
        }

        Integer ItemNo = entity.getItemNo();
        if (ItemNo != null) {
            stmt.bindLong(7, ItemNo);
        }

        Integer ReferCount = entity.getReferCount();
        if (ReferCount != null) {
            stmt.bindLong(8, ReferCount);
        }

        Integer ReferItemNo = entity.getReferItemNo();
        if (ReferItemNo != null) {
            stmt.bindLong(9, ReferItemNo);
        }

        Integer ReferBillType = entity.getReferBillType();
        if (ReferBillType != null) {
            stmt.bindLong(10, ReferBillType);
        }

        Double APrice = entity.getAPrice();
        if (APrice != null) {
            stmt.bindDouble(11, APrice);
        }

        Double BeforePrice = entity.getBeforePrice();
        if (BeforePrice != null) {
            stmt.bindDouble(12, BeforePrice);
        }

        Double Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindDouble(13, Amount);
        }

        Double UnitPrice = entity.getUnitPrice();
        if (UnitPrice != null) {
            stmt.bindDouble(14, UnitPrice);
        }

        Double Price = entity.getPrice();
        if (Price != null) {
            stmt.bindDouble(15, Price);
        }

        Double Quantity = entity.getQuantity();
        if (Quantity != null) {
            stmt.bindDouble(16, Quantity);
        }

        Double IOQty = entity.getIOQty();
        if (IOQty != null) {
            stmt.bindDouble(17, IOQty);
        }

        Double OIQty = entity.getOIQty();
        if (OIQty != null) {
            stmt.bindDouble(18, OIQty);
        }

        Double UnitQuantity = entity.getUnitQuantity();
        if (UnitQuantity != null) {
            stmt.bindDouble(19, UnitQuantity);
        }

        Double UnitRate = entity.getUnitRate();
        if (UnitRate != null) {
            stmt.bindDouble(20, UnitRate);
        }

        String BarCode = entity.getBarCode();
        if (BarCode != null) {
            stmt.bindString(21, BarCode);
        }

        String GoodsCode = entity.getGoodsCode();
        if (GoodsCode != null) {
            stmt.bindString(22, GoodsCode);
        }

        String ReferBillCode = entity.getReferBillCode();
        if (ReferBillCode != null) {
            stmt.bindString(23, ReferBillCode);
        }

        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(24, Remark);
        }

        String GoodsName = entity.getGoodsName();
        if (GoodsName != null) {
            stmt.bindString(25, GoodsName);
        }

        String ShortName = entity.getShortName();
        if (ShortName != null) {
            stmt.bindString(26, ShortName);
        }

        String Specs = entity.getSpecs();
        if (Specs != null) {
            stmt.bindString(27, Specs);
        }

        String UnitName = entity.getUnitName();
        if (UnitName != null) {
            stmt.bindString(28, UnitName);
        }

        String UserDef1 = entity.getUserDef1();
        if (UserDef1 != null) {
            stmt.bindString(29, UserDef1);
        }

        String UserDef2 = entity.getUserDef2();
        if (UserDef2 != null) {
            stmt.bindString(30, UserDef2);
        }

        String UserDef3 = entity.getUserDef3();
        if (UserDef3 != null) {
            stmt.bindString(31, UserDef3);
        }

        String UserDef4 = entity.getUserDef4();
        if (UserDef4 != null) {
            stmt.bindString(32, UserDef4);
        }

        String UserDef5 = entity.getUserDef5();
        if (UserDef5 != null) {
            stmt.bindString(33, UserDef5);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public TransferDetail1Data readEntity(Cursor cursor, int offset) {
        TransferDetail1Data entity = new TransferDetail1Data( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // MasterID
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // BillID
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // GoodsID
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // ReferBillID
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // UnitID
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // ItemNo
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ReferCount
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ReferItemNo
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // ReferBillType
                cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // APrice
                cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // BeforePrice
                cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // Amount
                cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // UnitPrice
                cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // Price
                cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // Quantity
                cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // IOQty
                cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // OIQty
                cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // UnitQuantity
                cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // UnitRate
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // BarCode
                cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // GoodsCode
                cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ReferBillCode
                cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Remark
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // GoodsName
                cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ShortName
                cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // Specs
                cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // UnitName
                cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // UserDef1
                cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // UserDef2
                cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // UserDef3
                cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // UserDef4
                cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // UserDef5
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, TransferDetail1Data entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMasterID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBillID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setGoodsID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setReferBillID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setUnitID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setItemNo(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setReferCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setReferItemNo(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setReferBillType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAPrice(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setBeforePrice(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setAmount(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setUnitPrice(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setPrice(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setQuantity(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setIOQty(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setOIQty(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setUnitQuantity(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setUnitRate(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setBarCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setGoodsCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setReferBillCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRemark(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setGoodsName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setShortName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSpecs(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUnitName(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setUserDef1(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setUserDef2(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setUserDef3(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setUserDef4(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setUserDef5(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(TransferDetail1Data entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(TransferDetail1Data entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "transferDetail1DataList" to-many relationship of TransferMasterData.
     */
    public List<TransferDetail1Data> _queryTransferMasterData_TransferDetail1DataList(Long MasterID) {
        synchronized (this) {
            if (transferMasterData_TransferDetail1DataListQuery == null) {
                QueryBuilder<TransferDetail1Data> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MasterID.eq(null));
                transferMasterData_TransferDetail1DataListQuery = queryBuilder.build();
            }
        }
        Query<TransferDetail1Data> query = transferMasterData_TransferDetail1DataListQuery.forCurrentThread();
        query.setParameter(0, MasterID);
        return query.list();
    }

    /**
     * Properties of entity TransferDetail1Data.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MasterID = new Property(1, Long.class, "MasterID", false, "MASTER_ID");
        public final static Property BillID = new Property(2, Long.class, "BillID", false, "BILL_ID");
        public final static Property GoodsID = new Property(3, Long.class, "GoodsID", false, "GOODS_ID");
        public final static Property ReferBillID = new Property(4, Long.class, "ReferBillID", false, "REFER_BILL_ID");
        public final static Property UnitID = new Property(5, Long.class, "UnitID", false, "UNIT_ID");
        public final static Property ItemNo = new Property(6, Integer.class, "ItemNo", false, "ITEM_NO");
        public final static Property ReferCount = new Property(7, Integer.class, "ReferCount", false, "REFER_COUNT");
        public final static Property ReferItemNo = new Property(8, Integer.class, "ReferItemNo", false, "REFER_ITEM_NO");
        public final static Property ReferBillType = new Property(9, Integer.class, "ReferBillType", false, "REFER_BILL_TYPE");
        public final static Property APrice = new Property(10, Double.class, "APrice", false, "APRICE");
        public final static Property BeforePrice = new Property(11, Double.class, "BeforePrice", false, "BEFORE_PRICE");
        public final static Property Amount = new Property(12, Double.class, "Amount", false, "AMOUNT");
        public final static Property UnitPrice = new Property(13, Double.class, "UnitPrice", false, "UNIT_PRICE");
        public final static Property Price = new Property(14, Double.class, "Price", false, "PRICE");
        public final static Property Quantity = new Property(15, Double.class, "Quantity", false, "QUANTITY");
        public final static Property IOQty = new Property(16, Double.class, "IOQty", false, "IOQTY");
        public final static Property OIQty = new Property(17, Double.class, "OIQty", false, "OIQTY");
        public final static Property UnitQuantity = new Property(18, Double.class, "UnitQuantity", false, "UNIT_QUANTITY");
        public final static Property UnitRate = new Property(19, Double.class, "UnitRate", false, "UNIT_RATE");
        public final static Property BarCode = new Property(20, String.class, "BarCode", false, "BAR_CODE");
        public final static Property GoodsCode = new Property(21, String.class, "GoodsCode", false, "GOODS_CODE");
        public final static Property ReferBillCode = new Property(22, String.class, "ReferBillCode", false, "REFER_BILL_CODE");
        public final static Property Remark = new Property(23, String.class, "Remark", false, "REMARK");
        public final static Property GoodsName = new Property(24, String.class, "GoodsName", false, "GOODS_NAME");
        public final static Property ShortName = new Property(25, String.class, "ShortName", false, "SHORT_NAME");
        public final static Property Specs = new Property(26, String.class, "Specs", false, "SPECS");
        public final static Property UnitName = new Property(27, String.class, "UnitName", false, "UNIT_NAME");
        public final static Property UserDef1 = new Property(28, String.class, "UserDef1", false, "USER_DEF1");
        public final static Property UserDef2 = new Property(29, String.class, "UserDef2", false, "USER_DEF2");
        public final static Property UserDef3 = new Property(30, String.class, "UserDef3", false, "USER_DEF3");
        public final static Property UserDef4 = new Property(31, String.class, "UserDef4", false, "USER_DEF4");
        public final static Property UserDef5 = new Property(32, String.class, "UserDef5", false, "USER_DEF5");
    }

}
