package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.SalesOrderDetail1Data;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SALES_ORDER_DETAIL1_DATA.
*/
public class SalesOrderDetail1DataDao extends AbstractDao<SalesOrderDetail1Data, Void> {

    public static final String TABLENAME = "SALES_ORDER_DETAIL1_DATA";

    /**
     * Properties of entity SalesOrderDetail1Data.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BillID = new Property(0, Long.class, "BillID", false, "BILL_ID");
        public final static Property ItemNo = new Property(1, Integer.class, "ItemNo", false, "ITEM_NO");
        public final static Property APrice = new Property(2, Double.class, "APrice", false, "APRICE");
        public final static Property Amount = new Property(3, Double.class, "Amount", false, "AMOUNT");
        public final static Property BarCode = new Property(4, String.class, "BarCode", false, "BAR_CODE");
        public final static Property ChargeDate = new Property(5, String.class, "ChargeDate", false, "CHARGE_DATE");
        public final static Property Closed = new Property(6, Integer.class, "Closed", false, "CLOSED");
        public final static Property Disc = new Property(7, Double.class, "Disc", false, "DISC");
        public final static Property GUserDef1 = new Property(8, String.class, "GUserDef1", false, "GUSER_DEF1");
        public final static Property GUserDef2 = new Property(9, String.class, "GUserDef2", false, "GUSER_DEF2");
        public final static Property GUserDef3 = new Property(10, String.class, "GUserDef3", false, "GUSER_DEF3");
        public final static Property GUserDef4 = new Property(11, String.class, "GUserDef4", false, "GUSER_DEF4");
        public final static Property GUserDef5 = new Property(12, String.class, "GUserDef5", false, "GUSER_DEF5");
        public final static Property GoodsAmt = new Property(13, Double.class, "GoodsAmt", false, "GOODS_AMT");
        public final static Property GoodsCode = new Property(14, String.class, "GoodsCode", false, "GOODS_CODE");
        public final static Property GoodsID = new Property(15, Long.class, "GoodsID", false, "GOODS_ID");
        public final static Property GoodsName = new Property(16, String.class, "GoodsName", false, "GOODS_NAME");
        public final static Property IsLargess = new Property(17, Integer.class, "IsLargess", false, "IS_LARGESS");
        public final static Property OrigPrice = new Property(18, Double.class, "OrigPrice", false, "ORIG_PRICE");
        public final static Property OrigTaxPrice = new Property(19, Double.class, "OrigTaxPrice", false, "ORIG_TAX_PRICE");
        public final static Property Price = new Property(20, Double.class, "Price", false, "PRICE");
        public final static Property Quantity = new Property(21, Double.class, "Quantity", false, "QUANTITY");
        public final static Property ReferBillCode = new Property(22, String.class, "ReferBillCode", false, "REFER_BILL_CODE");
        public final static Property ReferBillID = new Property(23, Long.class, "ReferBillID", false, "REFER_BILL_ID");
        public final static Property ReferBillType = new Property(24, String.class, "ReferBillType", false, "REFER_BILL_TYPE");
        public final static Property ReferCount = new Property(25, Integer.class, "ReferCount", false, "REFER_COUNT");
        public final static Property ReferItemNo = new Property(26, Integer.class, "ReferItemNo", false, "REFER_ITEM_NO");
        public final static Property ReferQty = new Property(27, Double.class, "ReferQty", false, "REFER_QTY");
        public final static Property Remark = new Property(28, String.class, "Remark", false, "REMARK");
        public final static Property ShortName = new Property(29, String.class, "ShortName", false, "SHORT_NAME");
        public final static Property Specs = new Property(30, String.class, "Specs", false, "SPECS");
        public final static Property StoreID = new Property(31, Long.class, "StoreID", false, "STORE_ID");
        public final static Property TaxAmt = new Property(32, Double.class, "TaxAmt", false, "TAX_AMT");
        public final static Property TaxRate = new Property(33, Double.class, "TaxRate", false, "TAX_RATE");
        public final static Property UnitID = new Property(34, Long.class, "UnitID", false, "UNIT_ID");
        public final static Property UnitName = new Property(35, String.class, "UnitName", false, "UNIT_NAME");
        public final static Property UnitPrice = new Property(36, Double.class, "UnitPrice", false, "UNIT_PRICE");
        public final static Property UnitQuantity = new Property(37, Double.class, "UnitQuantity", false, "UNIT_QUANTITY");
        public final static Property UnitRate = new Property(38, Double.class, "UnitRate", false, "UNIT_RATE");
        public final static Property UserDef1 = new Property(39, String.class, "UserDef1", false, "USER_DEF1");
        public final static Property UserDef2 = new Property(40, String.class, "UserDef2", false, "USER_DEF2");
        public final static Property UserDef3 = new Property(41, String.class, "UserDef3", false, "USER_DEF3");
        public final static Property UserDef4 = new Property(42, String.class, "UserDef4", false, "USER_DEF4");
        public final static Property UserDef5 = new Property(43, String.class, "UserDef5", false, "USER_DEF5");
    };


    public SalesOrderDetail1DataDao(DaoConfig config) {
        super(config);
    }
    
    public SalesOrderDetail1DataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SALES_ORDER_DETAIL1_DATA' (" + //
                "'BILL_ID' INTEGER," + // 0: BillID
                "'ITEM_NO' INTEGER," + // 1: ItemNo
                "'APRICE' REAL," + // 2: APrice
                "'AMOUNT' REAL," + // 3: Amount
                "'BAR_CODE' TEXT," + // 4: BarCode
                "'CHARGE_DATE' TEXT," + // 5: ChargeDate
                "'CLOSED' INTEGER," + // 6: Closed
                "'DISC' REAL," + // 7: Disc
                "'GUSER_DEF1' TEXT," + // 8: GUserDef1
                "'GUSER_DEF2' TEXT," + // 9: GUserDef2
                "'GUSER_DEF3' TEXT," + // 10: GUserDef3
                "'GUSER_DEF4' TEXT," + // 11: GUserDef4
                "'GUSER_DEF5' TEXT," + // 12: GUserDef5
                "'GOODS_AMT' REAL," + // 13: GoodsAmt
                "'GOODS_CODE' TEXT," + // 14: GoodsCode
                "'GOODS_ID' INTEGER," + // 15: GoodsID
                "'GOODS_NAME' TEXT," + // 16: GoodsName
                "'IS_LARGESS' INTEGER," + // 17: IsLargess
                "'ORIG_PRICE' REAL," + // 18: OrigPrice
                "'ORIG_TAX_PRICE' REAL," + // 19: OrigTaxPrice
                "'PRICE' REAL," + // 20: Price
                "'QUANTITY' REAL," + // 21: Quantity
                "'REFER_BILL_CODE' TEXT," + // 22: ReferBillCode
                "'REFER_BILL_ID' INTEGER," + // 23: ReferBillID
                "'REFER_BILL_TYPE' TEXT," + // 24: ReferBillType
                "'REFER_COUNT' INTEGER," + // 25: ReferCount
                "'REFER_ITEM_NO' INTEGER," + // 26: ReferItemNo
                "'REFER_QTY' REAL," + // 27: ReferQty
                "'REMARK' TEXT," + // 28: Remark
                "'SHORT_NAME' TEXT," + // 29: ShortName
                "'SPECS' TEXT," + // 30: Specs
                "'STORE_ID' INTEGER," + // 31: StoreID
                "'TAX_AMT' REAL," + // 32: TaxAmt
                "'TAX_RATE' REAL," + // 33: TaxRate
                "'UNIT_ID' INTEGER," + // 34: UnitID
                "'UNIT_NAME' TEXT," + // 35: UnitName
                "'UNIT_PRICE' REAL," + // 36: UnitPrice
                "'UNIT_QUANTITY' REAL," + // 37: UnitQuantity
                "'UNIT_RATE' REAL," + // 38: UnitRate
                "'USER_DEF1' TEXT," + // 39: UserDef1
                "'USER_DEF2' TEXT," + // 40: UserDef2
                "'USER_DEF3' TEXT," + // 41: UserDef3
                "'USER_DEF4' TEXT," + // 42: UserDef4
                "'USER_DEF5' TEXT);"); // 43: UserDef5
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SALES_ORDER_DETAIL1_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SalesOrderDetail1Data entity) {
        stmt.clearBindings();
 
        Long BillID = entity.getBillID();
        if (BillID != null) {
            stmt.bindLong(1, BillID);
        }
 
        Integer ItemNo = entity.getItemNo();
        if (ItemNo != null) {
            stmt.bindLong(2, ItemNo);
        }
 
        Double APrice = entity.getAPrice();
        if (APrice != null) {
            stmt.bindDouble(3, APrice);
        }
 
        Double Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindDouble(4, Amount);
        }
 
        String BarCode = entity.getBarCode();
        if (BarCode != null) {
            stmt.bindString(5, BarCode);
        }
 
        String ChargeDate = entity.getChargeDate();
        if (ChargeDate != null) {
            stmt.bindString(6, ChargeDate);
        }
 
        Integer Closed = entity.getClosed();
        if (Closed != null) {
            stmt.bindLong(7, Closed);
        }
 
        Double Disc = entity.getDisc();
        if (Disc != null) {
            stmt.bindDouble(8, Disc);
        }
 
        String GUserDef1 = entity.getGUserDef1();
        if (GUserDef1 != null) {
            stmt.bindString(9, GUserDef1);
        }
 
        String GUserDef2 = entity.getGUserDef2();
        if (GUserDef2 != null) {
            stmt.bindString(10, GUserDef2);
        }
 
        String GUserDef3 = entity.getGUserDef3();
        if (GUserDef3 != null) {
            stmt.bindString(11, GUserDef3);
        }
 
        String GUserDef4 = entity.getGUserDef4();
        if (GUserDef4 != null) {
            stmt.bindString(12, GUserDef4);
        }
 
        String GUserDef5 = entity.getGUserDef5();
        if (GUserDef5 != null) {
            stmt.bindString(13, GUserDef5);
        }
 
        Double GoodsAmt = entity.getGoodsAmt();
        if (GoodsAmt != null) {
            stmt.bindDouble(14, GoodsAmt);
        }
 
        String GoodsCode = entity.getGoodsCode();
        if (GoodsCode != null) {
            stmt.bindString(15, GoodsCode);
        }
 
        Long GoodsID = entity.getGoodsID();
        if (GoodsID != null) {
            stmt.bindLong(16, GoodsID);
        }
 
        String GoodsName = entity.getGoodsName();
        if (GoodsName != null) {
            stmt.bindString(17, GoodsName);
        }
 
        Integer IsLargess = entity.getIsLargess();
        if (IsLargess != null) {
            stmt.bindLong(18, IsLargess);
        }
 
        Double OrigPrice = entity.getOrigPrice();
        if (OrigPrice != null) {
            stmt.bindDouble(19, OrigPrice);
        }
 
        Double OrigTaxPrice = entity.getOrigTaxPrice();
        if (OrigTaxPrice != null) {
            stmt.bindDouble(20, OrigTaxPrice);
        }
 
        Double Price = entity.getPrice();
        if (Price != null) {
            stmt.bindDouble(21, Price);
        }
 
        Double Quantity = entity.getQuantity();
        if (Quantity != null) {
            stmt.bindDouble(22, Quantity);
        }
 
        String ReferBillCode = entity.getReferBillCode();
        if (ReferBillCode != null) {
            stmt.bindString(23, ReferBillCode);
        }
 
        Long ReferBillID = entity.getReferBillID();
        if (ReferBillID != null) {
            stmt.bindLong(24, ReferBillID);
        }
 
        String ReferBillType = entity.getReferBillType();
        if (ReferBillType != null) {
            stmt.bindString(25, ReferBillType);
        }
 
        Integer ReferCount = entity.getReferCount();
        if (ReferCount != null) {
            stmt.bindLong(26, ReferCount);
        }
 
        Integer ReferItemNo = entity.getReferItemNo();
        if (ReferItemNo != null) {
            stmt.bindLong(27, ReferItemNo);
        }
 
        Double ReferQty = entity.getReferQty();
        if (ReferQty != null) {
            stmt.bindDouble(28, ReferQty);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(29, Remark);
        }
 
        String ShortName = entity.getShortName();
        if (ShortName != null) {
            stmt.bindString(30, ShortName);
        }
 
        String Specs = entity.getSpecs();
        if (Specs != null) {
            stmt.bindString(31, Specs);
        }
 
        Long StoreID = entity.getStoreID();
        if (StoreID != null) {
            stmt.bindLong(32, StoreID);
        }
 
        Double TaxAmt = entity.getTaxAmt();
        if (TaxAmt != null) {
            stmt.bindDouble(33, TaxAmt);
        }
 
        Double TaxRate = entity.getTaxRate();
        if (TaxRate != null) {
            stmt.bindDouble(34, TaxRate);
        }
 
        Long UnitID = entity.getUnitID();
        if (UnitID != null) {
            stmt.bindLong(35, UnitID);
        }
 
        String UnitName = entity.getUnitName();
        if (UnitName != null) {
            stmt.bindString(36, UnitName);
        }
 
        Double UnitPrice = entity.getUnitPrice();
        if (UnitPrice != null) {
            stmt.bindDouble(37, UnitPrice);
        }
 
        Double UnitQuantity = entity.getUnitQuantity();
        if (UnitQuantity != null) {
            stmt.bindDouble(38, UnitQuantity);
        }
 
        Double UnitRate = entity.getUnitRate();
        if (UnitRate != null) {
            stmt.bindDouble(39, UnitRate);
        }
 
        String UserDef1 = entity.getUserDef1();
        if (UserDef1 != null) {
            stmt.bindString(40, UserDef1);
        }
 
        String UserDef2 = entity.getUserDef2();
        if (UserDef2 != null) {
            stmt.bindString(41, UserDef2);
        }
 
        String UserDef3 = entity.getUserDef3();
        if (UserDef3 != null) {
            stmt.bindString(42, UserDef3);
        }
 
        String UserDef4 = entity.getUserDef4();
        if (UserDef4 != null) {
            stmt.bindString(43, UserDef4);
        }
 
        String UserDef5 = entity.getUserDef5();
        if (UserDef5 != null) {
            stmt.bindString(44, UserDef5);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SalesOrderDetail1Data readEntity(Cursor cursor, int offset) {
        SalesOrderDetail1Data entity = new SalesOrderDetail1Data( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // BillID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ItemNo
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // APrice
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Amount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BarCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ChargeDate
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // Closed
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // Disc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // GUserDef1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // GUserDef2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // GUserDef3
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // GUserDef4
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // GUserDef5
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // GoodsAmt
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // GoodsCode
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // GoodsID
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // GoodsName
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // IsLargess
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // OrigPrice
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // OrigTaxPrice
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // Price
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // Quantity
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ReferBillCode
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // ReferBillID
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // ReferBillType
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // ReferCount
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // ReferItemNo
            cursor.isNull(offset + 27) ? null : cursor.getDouble(offset + 27), // ReferQty
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // Remark
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // ShortName
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // Specs
            cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31), // StoreID
            cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32), // TaxAmt
            cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33), // TaxRate
            cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34), // UnitID
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // UnitName
            cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36), // UnitPrice
            cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37), // UnitQuantity
            cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38), // UnitRate
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // UserDef1
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // UserDef2
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // UserDef3
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // UserDef4
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43) // UserDef5
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SalesOrderDetail1Data entity, int offset) {
        entity.setBillID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemNo(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAPrice(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setBarCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChargeDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClosed(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDisc(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setGUserDef1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGUserDef2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGUserDef3(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGUserDef4(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGUserDef5(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGoodsAmt(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setGoodsCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGoodsID(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setGoodsName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsLargess(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setOrigPrice(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setOrigTaxPrice(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setPrice(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setQuantity(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setReferBillCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setReferBillID(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
        entity.setReferBillType(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setReferCount(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setReferItemNo(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setReferQty(cursor.isNull(offset + 27) ? null : cursor.getDouble(offset + 27));
        entity.setRemark(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setShortName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setSpecs(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setStoreID(cursor.isNull(offset + 31) ? null : cursor.getLong(offset + 31));
        entity.setTaxAmt(cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32));
        entity.setTaxRate(cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33));
        entity.setUnitID(cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34));
        entity.setUnitName(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setUnitPrice(cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36));
        entity.setUnitQuantity(cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37));
        entity.setUnitRate(cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38));
        entity.setUserDef1(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setUserDef2(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setUserDef3(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setUserDef4(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setUserDef5(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SalesOrderDetail1Data entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SalesOrderDetail1Data entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
