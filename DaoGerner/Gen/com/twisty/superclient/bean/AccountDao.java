package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCOUNT.
*/
public class AccountDao extends AbstractDao<Account, Void> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AccountID = new Property(0, Long.class, "AccountID", false, "ACCOUNT_ID");
        public final static Property ShopID = new Property(1, Long.class, "ShopID", false, "SHOP_ID");
        public final static Property AccountName = new Property(2, String.class, "AccountName", false, "ACCOUNT_NAME");
        public final static Property MoneyID = new Property(3, Long.class, "MoneyID", false, "MONEY_ID");
        public final static Property MoneyName = new Property(4, String.class, "MoneyName", false, "MONEY_NAME");
        public final static Property BankID = new Property(5, Long.class, "BankID", false, "BANK_ID");
        public final static Property BankName = new Property(6, String.class, "BankName", false, "BANK_NAME");
        public final static Property AccountNo = new Property(7, String.class, "AccountNo", false, "ACCOUNT_NO");
        public final static Property Closed = new Property(8, Integer.class, "Closed", false, "CLOSED");
    };


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCOUNT' (" + //
                "'ACCOUNT_ID' INTEGER," + // 0: AccountID
                "'SHOP_ID' INTEGER," + // 1: ShopID
                "'ACCOUNT_NAME' TEXT," + // 2: AccountName
                "'MONEY_ID' INTEGER," + // 3: MoneyID
                "'MONEY_NAME' TEXT," + // 4: MoneyName
                "'BANK_ID' INTEGER," + // 5: BankID
                "'BANK_NAME' TEXT," + // 6: BankName
                "'ACCOUNT_NO' TEXT," + // 7: AccountNo
                "'CLOSED' INTEGER);"); // 8: Closed
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ACCOUNT_ACCOUNT_ID ON ACCOUNT" +
                " (ACCOUNT_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ACCOUNT_SHOP_ID ON ACCOUNT" +
                " (SHOP_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCOUNT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long AccountID = entity.getAccountID();
        if (AccountID != null) {
            stmt.bindLong(1, AccountID);
        }
 
        Long ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(2, ShopID);
        }
 
        String AccountName = entity.getAccountName();
        if (AccountName != null) {
            stmt.bindString(3, AccountName);
        }
 
        Long MoneyID = entity.getMoneyID();
        if (MoneyID != null) {
            stmt.bindLong(4, MoneyID);
        }
 
        String MoneyName = entity.getMoneyName();
        if (MoneyName != null) {
            stmt.bindString(5, MoneyName);
        }
 
        Long BankID = entity.getBankID();
        if (BankID != null) {
            stmt.bindLong(6, BankID);
        }
 
        String BankName = entity.getBankName();
        if (BankName != null) {
            stmt.bindString(7, BankName);
        }
 
        String AccountNo = entity.getAccountNo();
        if (AccountNo != null) {
            stmt.bindString(8, AccountNo);
        }
 
        Integer Closed = entity.getClosed();
        if (Closed != null) {
            stmt.bindLong(9, Closed);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // AccountID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ShopID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AccountName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // MoneyID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MoneyName
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // BankID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BankName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // AccountNo
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // Closed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setAccountID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShopID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAccountName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoneyID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMoneyName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBankID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBankName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccountNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClosed(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Account entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Account entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
