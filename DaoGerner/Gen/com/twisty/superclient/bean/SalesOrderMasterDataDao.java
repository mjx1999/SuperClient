package com.twisty.superclient.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.twisty.superclient.bean.SalesOrderMasterData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SALES_ORDER_MASTER_DATA.
*/
public class SalesOrderMasterDataDao extends AbstractDao<SalesOrderMasterData, Void> {

    public static final String TABLENAME = "SALES_ORDER_MASTER_DATA";

    /**
     * Properties of entity SalesOrderMasterData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BillID = new Property(0, Long.class, "BillID", false, "BILL_ID");
        public final static Property BillState = new Property(1, Integer.class, "BillState", false, "BILL_STATE");
        public final static Property BillStateName = new Property(2, String.class, "BillStateName", false, "BILL_STATE_NAME");
        public final static Property Amount = new Property(3, Double.class, "Amount", false, "AMOUNT");
        public final static Property BillCode = new Property(4, String.class, "BillCode", false, "BILL_CODE");
        public final static Property BillDate = new Property(5, String.class, "BillDate", false, "BILL_DATE");
        public final static Property Billto = new Property(6, String.class, "Billto", false, "BILLTO");
        public final static Property CheckorCode = new Property(7, String.class, "CheckorCode", false, "CHECKOR_CODE");
        public final static Property CheckorID = new Property(8, Long.class, "CheckorID", false, "CHECKOR_ID");
        public final static Property CheckorName = new Property(9, String.class, "CheckorName", false, "CHECKOR_NAME");
        public final static Property CloseReason = new Property(10, String.class, "CloseReason", false, "CLOSE_REASON");
        public final static Property Closed = new Property(11, Integer.class, "Closed", false, "CLOSED");
        public final static Property ContactFax = new Property(12, String.class, "ContactFax", false, "CONTACT_FAX");
        public final static Property ContactPhone = new Property(13, String.class, "ContactPhone", false, "CONTACT_PHONE");
        public final static Property Contactor = new Property(14, String.class, "Contactor", false, "CONTACTOR");
        public final static Property ContractNo = new Property(15, String.class, "ContractNo", false, "CONTRACT_NO");
        public final static Property DepartmentCode = new Property(16, String.class, "DepartmentCode", false, "DEPARTMENT_CODE");
        public final static Property DepartmentName = new Property(17, String.class, "DepartmentName", false, "DEPARTMENT_NAME");
        public final static Property DepartmentID = new Property(18, Long.class, "DepartmentID", false, "DEPARTMENT_ID");
        public final static Property EmpCode = new Property(19, String.class, "EmpCode", false, "EMP_CODE");
        public final static Property EmpID = new Property(20, Long.class, "EmpID", false, "EMP_ID");
        public final static Property EmpName = new Property(21, String.class, "EmpName", false, "EMP_NAME");
        public final static Property LinkMan = new Property(22, String.class, "LinkMan", false, "LINK_MAN");
        public final static Property OpCode = new Property(23, String.class, "OpCode", false, "OP_CODE");
        public final static Property OpID = new Property(24, Long.class, "OpID", false, "OP_ID");
        public final static Property OpName = new Property(25, String.class, "OpName", false, "OP_NAME");
        public final static Property PaymethodID = new Property(26, Long.class, "PaymethodID", false, "PAYMETHOD_ID");
        public final static Property PaymethodName = new Property(27, String.class, "PaymethodName", false, "PAYMETHOD_NAME");
        public final static Property ReferAmt = new Property(28, Double.class, "ReferAmt", false, "REFER_AMT");
        public final static Property Remark = new Property(29, String.class, "Remark", false, "REMARK");
        public final static Property RevDate = new Property(30, String.class, "RevDate", false, "REV_DATE");
        public final static Property Sflag = new Property(31, Integer.class, "Sflag", false, "SFLAG");
        public final static Property ShipType = new Property(32, Long.class, "ShipType", false, "SHIP_TYPE");
        public final static Property ShipTypeName = new Property(33, String.class, "ShipTypeName", false, "SHIP_TYPE_NAME");
        public final static Property Shopid = new Property(34, Long.class, "Shopid", false, "SHOPID");
        public final static Property TraderCode = new Property(35, String.class, "TraderCode", false, "TRADER_CODE");
        public final static Property TraderId = new Property(36, Long.class, "TraderId", false, "TRADER_ID");
        public final static Property TraderName = new Property(37, String.class, "TraderName", false, "TRADER_NAME");
        public final static Property UpdateTime = new Property(38, String.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property UserDef1 = new Property(39, String.class, "UserDef1", false, "USER_DEF1");
        public final static Property UserDef2 = new Property(40, String.class, "UserDef2", false, "USER_DEF2");
        public final static Property UserDef3 = new Property(41, String.class, "UserDef3", false, "USER_DEF3");
        public final static Property UserDef4 = new Property(42, String.class, "UserDef4", false, "USER_DEF4");
        public final static Property UserDef5 = new Property(43, String.class, "UserDef5", false, "USER_DEF5");
        public final static Property ValidDate = new Property(44, String.class, "ValidDate", false, "VALID_DATE");
    };


    public SalesOrderMasterDataDao(DaoConfig config) {
        super(config);
    }
    
    public SalesOrderMasterDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SALES_ORDER_MASTER_DATA' (" + //
                "'BILL_ID' INTEGER," + // 0: BillID
                "'BILL_STATE' INTEGER," + // 1: BillState
                "'BILL_STATE_NAME' TEXT," + // 2: BillStateName
                "'AMOUNT' REAL," + // 3: Amount
                "'BILL_CODE' TEXT," + // 4: BillCode
                "'BILL_DATE' TEXT," + // 5: BillDate
                "'BILLTO' TEXT," + // 6: Billto
                "'CHECKOR_CODE' TEXT," + // 7: CheckorCode
                "'CHECKOR_ID' INTEGER," + // 8: CheckorID
                "'CHECKOR_NAME' TEXT," + // 9: CheckorName
                "'CLOSE_REASON' TEXT," + // 10: CloseReason
                "'CLOSED' INTEGER," + // 11: Closed
                "'CONTACT_FAX' TEXT," + // 12: ContactFax
                "'CONTACT_PHONE' TEXT," + // 13: ContactPhone
                "'CONTACTOR' TEXT," + // 14: Contactor
                "'CONTRACT_NO' TEXT," + // 15: ContractNo
                "'DEPARTMENT_CODE' TEXT," + // 16: DepartmentCode
                "'DEPARTMENT_NAME' TEXT," + // 17: DepartmentName
                "'DEPARTMENT_ID' INTEGER," + // 18: DepartmentID
                "'EMP_CODE' TEXT," + // 19: EmpCode
                "'EMP_ID' INTEGER," + // 20: EmpID
                "'EMP_NAME' TEXT," + // 21: EmpName
                "'LINK_MAN' TEXT," + // 22: LinkMan
                "'OP_CODE' TEXT," + // 23: OpCode
                "'OP_ID' INTEGER," + // 24: OpID
                "'OP_NAME' TEXT," + // 25: OpName
                "'PAYMETHOD_ID' INTEGER," + // 26: PaymethodID
                "'PAYMETHOD_NAME' TEXT," + // 27: PaymethodName
                "'REFER_AMT' REAL," + // 28: ReferAmt
                "'REMARK' TEXT," + // 29: Remark
                "'REV_DATE' TEXT," + // 30: RevDate
                "'SFLAG' INTEGER," + // 31: Sflag
                "'SHIP_TYPE' INTEGER," + // 32: ShipType
                "'SHIP_TYPE_NAME' TEXT," + // 33: ShipTypeName
                "'SHOPID' INTEGER," + // 34: Shopid
                "'TRADER_CODE' TEXT," + // 35: TraderCode
                "'TRADER_ID' INTEGER," + // 36: TraderId
                "'TRADER_NAME' TEXT," + // 37: TraderName
                "'UPDATE_TIME' TEXT," + // 38: UpdateTime
                "'USER_DEF1' TEXT," + // 39: UserDef1
                "'USER_DEF2' TEXT," + // 40: UserDef2
                "'USER_DEF3' TEXT," + // 41: UserDef3
                "'USER_DEF4' TEXT," + // 42: UserDef4
                "'USER_DEF5' TEXT," + // 43: UserDef5
                "'VALID_DATE' TEXT);"); // 44: ValidDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SALES_ORDER_MASTER_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SalesOrderMasterData entity) {
        stmt.clearBindings();
 
        Long BillID = entity.getBillID();
        if (BillID != null) {
            stmt.bindLong(1, BillID);
        }
 
        Integer BillState = entity.getBillState();
        if (BillState != null) {
            stmt.bindLong(2, BillState);
        }
 
        String BillStateName = entity.getBillStateName();
        if (BillStateName != null) {
            stmt.bindString(3, BillStateName);
        }
 
        Double Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindDouble(4, Amount);
        }
 
        String BillCode = entity.getBillCode();
        if (BillCode != null) {
            stmt.bindString(5, BillCode);
        }
 
        String BillDate = entity.getBillDate();
        if (BillDate != null) {
            stmt.bindString(6, BillDate);
        }
 
        String Billto = entity.getBillto();
        if (Billto != null) {
            stmt.bindString(7, Billto);
        }
 
        String CheckorCode = entity.getCheckorCode();
        if (CheckorCode != null) {
            stmt.bindString(8, CheckorCode);
        }
 
        Long CheckorID = entity.getCheckorID();
        if (CheckorID != null) {
            stmt.bindLong(9, CheckorID);
        }
 
        String CheckorName = entity.getCheckorName();
        if (CheckorName != null) {
            stmt.bindString(10, CheckorName);
        }
 
        String CloseReason = entity.getCloseReason();
        if (CloseReason != null) {
            stmt.bindString(11, CloseReason);
        }
 
        Integer Closed = entity.getClosed();
        if (Closed != null) {
            stmt.bindLong(12, Closed);
        }
 
        String ContactFax = entity.getContactFax();
        if (ContactFax != null) {
            stmt.bindString(13, ContactFax);
        }
 
        String ContactPhone = entity.getContactPhone();
        if (ContactPhone != null) {
            stmt.bindString(14, ContactPhone);
        }
 
        String Contactor = entity.getContactor();
        if (Contactor != null) {
            stmt.bindString(15, Contactor);
        }
 
        String ContractNo = entity.getContractNo();
        if (ContractNo != null) {
            stmt.bindString(16, ContractNo);
        }
 
        String DepartmentCode = entity.getDepartmentCode();
        if (DepartmentCode != null) {
            stmt.bindString(17, DepartmentCode);
        }
 
        String DepartmentName = entity.getDepartmentName();
        if (DepartmentName != null) {
            stmt.bindString(18, DepartmentName);
        }
 
        Long DepartmentID = entity.getDepartmentID();
        if (DepartmentID != null) {
            stmt.bindLong(19, DepartmentID);
        }
 
        String EmpCode = entity.getEmpCode();
        if (EmpCode != null) {
            stmt.bindString(20, EmpCode);
        }
 
        Long EmpID = entity.getEmpID();
        if (EmpID != null) {
            stmt.bindLong(21, EmpID);
        }
 
        String EmpName = entity.getEmpName();
        if (EmpName != null) {
            stmt.bindString(22, EmpName);
        }
 
        String LinkMan = entity.getLinkMan();
        if (LinkMan != null) {
            stmt.bindString(23, LinkMan);
        }
 
        String OpCode = entity.getOpCode();
        if (OpCode != null) {
            stmt.bindString(24, OpCode);
        }
 
        Long OpID = entity.getOpID();
        if (OpID != null) {
            stmt.bindLong(25, OpID);
        }
 
        String OpName = entity.getOpName();
        if (OpName != null) {
            stmt.bindString(26, OpName);
        }
 
        Long PaymethodID = entity.getPaymethodID();
        if (PaymethodID != null) {
            stmt.bindLong(27, PaymethodID);
        }
 
        String PaymethodName = entity.getPaymethodName();
        if (PaymethodName != null) {
            stmt.bindString(28, PaymethodName);
        }
 
        Double ReferAmt = entity.getReferAmt();
        if (ReferAmt != null) {
            stmt.bindDouble(29, ReferAmt);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(30, Remark);
        }
 
        String RevDate = entity.getRevDate();
        if (RevDate != null) {
            stmt.bindString(31, RevDate);
        }
 
        Integer Sflag = entity.getSflag();
        if (Sflag != null) {
            stmt.bindLong(32, Sflag);
        }
 
        Long ShipType = entity.getShipType();
        if (ShipType != null) {
            stmt.bindLong(33, ShipType);
        }
 
        String ShipTypeName = entity.getShipTypeName();
        if (ShipTypeName != null) {
            stmt.bindString(34, ShipTypeName);
        }
 
        Long Shopid = entity.getShopid();
        if (Shopid != null) {
            stmt.bindLong(35, Shopid);
        }
 
        String TraderCode = entity.getTraderCode();
        if (TraderCode != null) {
            stmt.bindString(36, TraderCode);
        }
 
        Long TraderId = entity.getTraderId();
        if (TraderId != null) {
            stmt.bindLong(37, TraderId);
        }
 
        String TraderName = entity.getTraderName();
        if (TraderName != null) {
            stmt.bindString(38, TraderName);
        }
 
        String UpdateTime = entity.getUpdateTime();
        if (UpdateTime != null) {
            stmt.bindString(39, UpdateTime);
        }
 
        String UserDef1 = entity.getUserDef1();
        if (UserDef1 != null) {
            stmt.bindString(40, UserDef1);
        }
 
        String UserDef2 = entity.getUserDef2();
        if (UserDef2 != null) {
            stmt.bindString(41, UserDef2);
        }
 
        String UserDef3 = entity.getUserDef3();
        if (UserDef3 != null) {
            stmt.bindString(42, UserDef3);
        }
 
        String UserDef4 = entity.getUserDef4();
        if (UserDef4 != null) {
            stmt.bindString(43, UserDef4);
        }
 
        String UserDef5 = entity.getUserDef5();
        if (UserDef5 != null) {
            stmt.bindString(44, UserDef5);
        }
 
        String ValidDate = entity.getValidDate();
        if (ValidDate != null) {
            stmt.bindString(45, ValidDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SalesOrderMasterData readEntity(Cursor cursor, int offset) {
        SalesOrderMasterData entity = new SalesOrderMasterData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // BillID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // BillState
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BillStateName
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Amount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BillCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BillDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Billto
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CheckorCode
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // CheckorID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // CheckorName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CloseReason
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // Closed
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ContactFax
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ContactPhone
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Contactor
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ContractNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // DepartmentCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // DepartmentName
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // DepartmentID
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // EmpCode
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // EmpID
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // EmpName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // LinkMan
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // OpCode
            cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24), // OpID
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // OpName
            cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26), // PaymethodID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // PaymethodName
            cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28), // ReferAmt
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // Remark
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // RevDate
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // Sflag
            cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32), // ShipType
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // ShipTypeName
            cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34), // Shopid
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // TraderCode
            cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36), // TraderId
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // TraderName
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // UpdateTime
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // UserDef1
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // UserDef2
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // UserDef3
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // UserDef4
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // UserDef5
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44) // ValidDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SalesOrderMasterData entity, int offset) {
        entity.setBillID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillState(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBillStateName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setBillCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBillDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBillto(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheckorCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCheckorID(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCheckorName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCloseReason(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClosed(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setContactFax(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setContactPhone(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setContactor(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setContractNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDepartmentCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDepartmentName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDepartmentID(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setEmpCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setEmpID(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setEmpName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLinkMan(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOpCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setOpID(cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24));
        entity.setOpName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPaymethodID(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
        entity.setPaymethodName(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setReferAmt(cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28));
        entity.setRemark(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRevDate(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setSflag(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setShipType(cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32));
        entity.setShipTypeName(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setShopid(cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34));
        entity.setTraderCode(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setTraderId(cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36));
        entity.setTraderName(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setUpdateTime(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setUserDef1(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setUserDef2(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setUserDef3(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setUserDef4(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setUserDef5(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setValidDate(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SalesOrderMasterData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SalesOrderMasterData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
